{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Fuck Twitter Base64","options":{"check_for_updates":false,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://twitter.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1648843297873,"data":{}},"enabled":false,"position":1,"uuid":"e371daf4-6f3b-497d-859b-1f7cbfbb88f0","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBGdWNrIFR3aXR0ZXIgQmFzZTY0Ci8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgRnVjayBUd2l0dGVyIGJhc2U2NAovLyBAYXV0aG9yICAgICAgIFllWGlhb1JhaW4KLy8gQG1hdGNoICAgICAgICBodHRwczovL3R3aXR0ZXIuY29tLyoKLy8gQGljb24gICAgICAgICBodHRwczovL3d3dy5nb29nbGUuY29tL3MyL2Zhdmljb25zP3N6PTY0JmRvbWFpbj10d2l0dGVyLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBmID0gKHMpID0+IHsKICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGF0b2Iocykuc3BsaXQoJycpLm1hcCgoYykgPT4gewogICAgICAgICAgICByZXR1cm4gJyUnICsgKCcwMCcgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7CiAgICAgICAgfSkuam9pbignJykpOwogICAgfQogICAgY29uc3QgZCA9IChuKSA9PiB7CiAgICAgICAgaWYobi5ub2RlVHlwZSA9PSAzKSB7CiAgICAgICAgICAgIHRyeXsKICAgICAgICAgICAgICAgIG4udGV4dENvbnRlbnQgPSBmKG4udGV4dENvbnRlbnQpOwogICAgICAgICAgICB9Y2F0Y2goZSl7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2Ugbi5jaGlsZE5vZGVzLmZvckVhY2goZCk7CiAgICB9CiAgICAobmV3IE11dGF0aW9uT2JzZXJ2ZXIobyA9PiBvLmZvckVhY2godCA9PiB0LmFkZGVkTm9kZXMuZm9yRWFjaChkKSkpKQogICAgICAgIC5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHsnY2hpbGRMaXN0JzogMSwgJ3N1YnRyZWUnOiAxfSk7CiAgICBkKGRvY3VtZW50LmJvZHkpOwp9KSgpOw=="},{"name":"ac-predictor","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["https://atcoder.jp/*/json"],"orig_includes":[],"orig_matches":["https://atcoder.jp/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1652624231475,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/369954-ac-predictor/code/ac-predictor.user.js","uuid":"d796f439-0f96-4b14-a1b9-a77b6c0f16e3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIGFjLXByZWRpY3RvcgovLyBAbmFtZXNwYWNlICAgaHR0cDovL2FjLXByZWRpY3Rvci5henVyZXdlYnNpdGVzLm5ldC8KLy8gQHZlcnNpb24gICAgIDEuMi4xNgovLyBAZGVzY3JpcHRpb24g44Kz44Oz44OG44K544OI5Lit44GrQXRDb2RlcuOBruODkeODleOCqeODvOODnuODs+OCueOCkuS6iOa4rOOBl+OBvuOBmeOAggovLyBAYXV0aG9yICAgICAga2V5bW9vbgovLyBAbGljZW5zZSAgICAgTUlUCi8vIEBzdXBwb3J0VVJMICBodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9zY3JlZW5fbmFtZT1reW1uXwovLyBAbWF0Y2ggICAgICAgaHR0cHM6Ly9hdGNvZGVyLmpwLyoKLy8gQGV4Y2x1ZGUgICAgIGh0dHBzOi8vYXRjb2Rlci5qcC8qL2pzb24KLy8gPT0vVXNlclNjcmlwdD09Ci8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgpDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4KClBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueQpwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSApSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkKQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULApJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST00KTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1IKT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUgpQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLgoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLwoKZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikgewogICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9CiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9CiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbInRocm93Il0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfQogICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9CiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpOwogICAgfSk7Cn0KCnZhciBkb20gPSAiPGRpdiBpZD1cInByZWRpY3Rvci1hbGVydFwiIGNsYXNzPVwicm93XCI+PGg1IGNsYXNzPVwic2lkZW1lbnUtdHh0XCI+6Kqt44G/6L6844G/5Lit4oCmPC9oNT48L2Rpdj5cbjxkaXYgaWQ9XCJwcmVkaWN0b3ItZGF0YVwiIGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIGNvbC14cy0xMlwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+6aCG5L2NXG4gICAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAgICAgLnByZWRpY3Rvci10b29sdGlwLWljb246aG92ZXIrLnRvb2x0aXB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IC45O1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9OTApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvc3R5bGU+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByZWRpY3Rvci10b29sdGlwLWljb24gZ2x5cGhpY29uIGdseXBoaWNvbi1xdWVzdGlvbi1zaWduXCI+PC9zcGFuPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvb2x0aXAgZmFkZSBib3R0b21cIiBzdHlsZT1cInBvaW50ZXItZXZlbnRzOm5vbmVcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiIHN0eWxlPVwibGVmdDogMTglO1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+UmF0ZWTlhoXjga7poIbkvY3jgafjgZnjgILopIfmlbDkurrlkIzpoIbkvY3jga7pmpvjga/kurrmlbDjgpLliqDlkbPjgZfjgb7jgZkoNeS9jeOBjDTkurrlsYXjgZ/jgok2LjXkvY3jgajjgZfjgaboqIjnrpcpPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cInByZWRpY3Rvci1pbnB1dC1yYW5rXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIj7kvY08L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgICAgIFxuICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBjb2wteHMtMTJcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiPuODkeODleOCqeODvOODnuODs+OCuTwvc3Bhbj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgaWQ9XCJwcmVkaWN0b3ItaW5wdXQtcGVyZlwiPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIGNvbC14cy0xMlwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+44Os44O844OG44Kj44Oz44KwPC9zcGFuPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cInByZWRpY3Rvci1pbnB1dC1yYXRlXCI+XG4gICAgPC9kaXY+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBpZD1cInByZWRpY3Rvci1jdXJyZW50XCI+54++5Zyo44Gu6aCG5L2NPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgaWQ9XCJwcmVkaWN0b3ItcmVsb2FkXCIgZGF0YS1sb2FkaW5nLXRleHQ9XCLmm7TmlrDkuK3igKZcIj7mm7TmlrA8L2J1dHRvbj5cbiAgICAgICAgPCEtLTxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBpZD1cInByZWRpY3Rvci1zb2x2ZWRcIiBkaXNhYmxlZD7nj77llY/poYxBQ+W+jDwvYnV0dG9uPi0tPlxuICAgIDwvZGl2PlxuPC9kaXY+IjsKCmNsYXNzIFJlc3VsdCB7CiAgICBjb25zdHJ1Y3Rvcihpc1JhdGVkLCBpc1N1Ym1pdHRlZCwgdXNlclNjcmVlbk5hbWUsIHBsYWNlLCByYXRlZFJhbmssIG9sZFJhdGluZywgbmV3UmF0aW5nLCBjb21wZXRpdGlvbnMsIHBlcmZvcm1hbmNlLCBpbm5lclBlcmZvcm1hbmNlKSB7CiAgICAgICAgdGhpcy5Jc1JhdGVkID0gaXNSYXRlZDsKICAgICAgICB0aGlzLklzU3VibWl0dGVkID0gaXNTdWJtaXR0ZWQ7CiAgICAgICAgdGhpcy5Vc2VyU2NyZWVuTmFtZSA9IHVzZXJTY3JlZW5OYW1lOwogICAgICAgIHRoaXMuUGxhY2UgPSBwbGFjZTsKICAgICAgICB0aGlzLlJhdGVkUmFuayA9IHJhdGVkUmFuazsKICAgICAgICB0aGlzLk9sZFJhdGluZyA9IG9sZFJhdGluZzsKICAgICAgICB0aGlzLk5ld1JhdGluZyA9IG5ld1JhdGluZzsKICAgICAgICB0aGlzLkNvbXBldGl0aW9ucyA9IGNvbXBldGl0aW9uczsKICAgICAgICB0aGlzLlBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7CiAgICAgICAgdGhpcy5Jbm5lclBlcmZvcm1hbmNlID0gaW5uZXJQZXJmb3JtYW5jZTsKICAgIH0KfQoKZnVuY3Rpb24gYW5hbHl6ZVN0YW5kaW5nc0RhdGEoZml4ZWQsIHN0YW5kaW5nc0RhdGEsIGFQZXJmcywgZGVmYXVsdEFQZXJmLCByYXRlZExpbWl0LCBpc0hldXJpc3RpYykgewogICAgZnVuY3Rpb24gYW5hbHl6ZShpc1VzZXJSYXRlZCkgewogICAgICAgIGNvbnN0IGNvbnRlc3RhbnRBUGVyZiA9IFtdOwogICAgICAgIGNvbnN0IHRlbXBsYXRlUmVzdWx0cyA9IHt9OwogICAgICAgIGxldCBjdXJyZW50UmF0ZWRSYW5rID0gMTsKICAgICAgICBsZXQgbGFzdFJhbmsgPSAwOwogICAgICAgIGNvbnN0IHRpZWRVc2VycyA9IFtdOwogICAgICAgIGxldCByYXRlZEluVGllZFVzZXJzID0gMDsKICAgICAgICBmdW5jdGlvbiBhcHBseVRpZWRVc2VycygpIHsKICAgICAgICAgICAgdGllZFVzZXJzLmZvckVhY2goKGRhdGEpID0+IHsKICAgICAgICAgICAgICAgIGlmIChpc1VzZXJSYXRlZChkYXRhKSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRlc3RhbnRBUGVyZi5wdXNoKGFQZXJmc1tkYXRhLlVzZXJTY3JlZW5OYW1lXSB8fCBkZWZhdWx0QVBlcmYpOwogICAgICAgICAgICAgICAgICAgIHJhdGVkSW5UaWVkVXNlcnMrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnN0IHJhdGVkUmFuayA9IGN1cnJlbnRSYXRlZFJhbmsgKyBNYXRoLm1heCgwLCByYXRlZEluVGllZFVzZXJzIC0gMSkgLyAyOwogICAgICAgICAgICB0aWVkVXNlcnMuZm9yRWFjaCgoZGF0YSkgPT4gewogICAgICAgICAgICAgICAgdGVtcGxhdGVSZXN1bHRzW2RhdGEuVXNlclNjcmVlbk5hbWVdID0gbmV3IFJlc3VsdCghaXNIZXVyaXN0aWMgLyogRklYTUU6IFRlbXBvcmFyeSBkaXNhYmxlZCBmb3IgdGhlIEFIQyByYXRpbmcgc3lzdGVtICovICYmIGlzVXNlclJhdGVkKGRhdGEpLCAhaXNIZXVyaXN0aWMgfHwgZGF0YS5Ub3RhbFJlc3VsdC5Db3VudCAhPT0gMCwgZGF0YS5Vc2VyU2NyZWVuTmFtZSwgZGF0YS5SYW5rLCByYXRlZFJhbmssIGZpeGVkID8gZGF0YS5PbGRSYXRpbmcgOiBkYXRhLlJhdGluZywgbnVsbCwgZGF0YS5Db21wZXRpdGlvbnMsIG51bGwsIG51bGwpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY3VycmVudFJhdGVkUmFuayArPSByYXRlZEluVGllZFVzZXJzOwogICAgICAgICAgICB0aWVkVXNlcnMubGVuZ3RoID0gMDsKICAgICAgICAgICAgcmF0ZWRJblRpZWRVc2VycyA9IDA7CiAgICAgICAgfQogICAgICAgIHN0YW5kaW5nc0RhdGEuZm9yRWFjaCgoZGF0YSkgPT4gewogICAgICAgICAgICBpZiAobGFzdFJhbmsgIT09IGRhdGEuUmFuaykKICAgICAgICAgICAgICAgIGFwcGx5VGllZFVzZXJzKCk7CiAgICAgICAgICAgIGxhc3RSYW5rID0gZGF0YS5SYW5rOwogICAgICAgICAgICB0aWVkVXNlcnMucHVzaChkYXRhKTsKICAgICAgICB9KTsKICAgICAgICBhcHBseVRpZWRVc2VycygpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGNvbnRlc3RhbnRBUGVyZjogY29udGVzdGFudEFQZXJmLAogICAgICAgICAgICB0ZW1wbGF0ZVJlc3VsdHM6IHRlbXBsYXRlUmVzdWx0cywKICAgICAgICB9OwogICAgfQogICAgbGV0IGFuYWx5emVkRGF0YSA9IGFuYWx5emUoKGRhdGEpID0+IGRhdGEuSXNSYXRlZCAmJiAoIWlzSGV1cmlzdGljIHx8IGRhdGEuVG90YWxSZXN1bHQuQ291bnQgIT09IDApKTsKICAgIGxldCBpc1JhdGVkID0gdHJ1ZTsKICAgIGlmIChhbmFseXplZERhdGEuY29udGVzdGFudEFQZXJmLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGFuYWx5emVkRGF0YSA9IGFuYWx5emUoKGRhdGEpID0+IGRhdGEuT2xkUmF0aW5nIDwgcmF0ZWRMaW1pdCAmJiAoIWlzSGV1cmlzdGljIHx8IGRhdGEuVG90YWxSZXN1bHQuQ291bnQgIT09IDApKTsKICAgICAgICBpc1JhdGVkID0gZmFsc2U7CiAgICB9CiAgICBjb25zdCByZXMgPSBhbmFseXplZERhdGE7CiAgICByZXMuaXNSYXRlZCA9IGlzUmF0ZWQ7CiAgICByZXR1cm4gcmVzOwp9CmNsYXNzIENvbnRlc3QgewogICAgY29uc3RydWN0b3IoY29udGVzdFNjcmVlbk5hbWUsIGNvbnRlc3RJbmZvcm1hdGlvbiwgc3RhbmRpbmdzLCBhUGVyZnMpIHsKICAgICAgICB0aGlzLnJhdGVkTGltaXQgPSBjb250ZXN0SW5mb3JtYXRpb24uUmF0ZWRSYW5nZVsxXSArIDE7CiAgICAgICAgdGhpcy5wZXJmTGltaXQgPSB0aGlzLnJhdGVkTGltaXQgKyA0MDA7CiAgICAgICAgdGhpcy5zdGFuZGluZ3MgPSBzdGFuZGluZ3M7CiAgICAgICAgdGhpcy5hUGVyZnMgPSBhUGVyZnM7CiAgICAgICAgdGhpcy5yYW5rTWVtbyA9IHt9OwogICAgICAgIGNvbnN0IGFuYWx5emVkRGF0YSA9IGFuYWx5emVTdGFuZGluZ3NEYXRhKHN0YW5kaW5ncy5GaXhlZCwgc3RhbmRpbmdzLlN0YW5kaW5nc0RhdGEsIGFQZXJmcywgY29udGVzdEluZm9ybWF0aW9uLmlzSGV1cmlzdGljID8gMTAwMCA6ICh7IDIwMDA6IDgwMCwgMjgwMDogMTAwMCwgSW5maW5pdHk6IDEyMDAgfVt0aGlzLnJhdGVkTGltaXRdIHx8IDEyMDApLCB0aGlzLnJhdGVkTGltaXQsIGNvbnRlc3RJbmZvcm1hdGlvbi5pc0hldXJpc3RpYyk7CiAgICAgICAgdGhpcy5jb250ZXN0YW50QVBlcmYgPSBhbmFseXplZERhdGEuY29udGVzdGFudEFQZXJmOwogICAgICAgIHRoaXMudGVtcGxhdGVSZXN1bHRzID0gYW5hbHl6ZWREYXRhLnRlbXBsYXRlUmVzdWx0czsKICAgICAgICB0aGlzLklzUmF0ZWQgPSBhbmFseXplZERhdGEuaXNSYXRlZDsKICAgIH0KICAgIGdldFJhdGVkUmFuayhYKSB7CiAgICAgICAgaWYgKHRoaXMucmFua01lbW9bWF0pCiAgICAgICAgICAgIHJldHVybiB0aGlzLnJhbmtNZW1vW1hdOwogICAgICAgIHJldHVybiAodGhpcy5yYW5rTWVtb1tYXSA9IHRoaXMuY29udGVzdGFudEFQZXJmLnJlZHVjZSgodmFsLCBBUGVyZikgPT4gdmFsICsgMS4wIC8gKDEuMCArIE1hdGgucG93KDYuMCwgKFggLSBBUGVyZikgLyA0MDAuMCkpLCAwLjUpKTsKICAgIH0KICAgIGdldFBlcmYocmF0ZWRSYW5rKSB7CiAgICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMuZ2V0SW5uZXJQZXJmKHJhdGVkUmFuayksIHRoaXMucGVyZkxpbWl0KTsKICAgIH0KICAgIGdldElubmVyUGVyZihyYXRlZFJhbmspIHsKICAgICAgICBsZXQgdXBwZXIgPSA2MTQ0OwogICAgICAgIGxldCBsb3dlciA9IC0yMDQ4OwogICAgICAgIHdoaWxlICh1cHBlciAtIGxvd2VyID4gMC41KSB7CiAgICAgICAgICAgIGNvbnN0IG1pZCA9ICh1cHBlciArIGxvd2VyKSAvIDI7CiAgICAgICAgICAgIGlmIChyYXRlZFJhbmsgPiB0aGlzLmdldFJhdGVkUmFuayhtaWQpKQogICAgICAgICAgICAgICAgdXBwZXIgPSBtaWQ7CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGxvd2VyID0gbWlkOwogICAgICAgIH0KICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgodXBwZXIgKyBsb3dlcikgLyAyKTsKICAgIH0KfQoKY2xhc3MgUmVzdWx0cyB7Cn0KCi8vQ29weXJpZ2h0IMKpIDIwMTcga29iYS1lOTY0LgovL2Zyb20gOiBodHRwczovL2dpdGh1Yi5jb20va29iYS1lOTY0L2F0Y29kZXItcmF0aW5nLWVzdGltYXRvcgpjb25zdCBmaW5mID0gYmlnZig0MDApOwpmdW5jdGlvbiBiaWdmKG4pIHsKICAgIGxldCBwb3cxID0gMTsKICAgIGxldCBwb3cyID0gMTsKICAgIGxldCBudW1lcmF0b3IgPSAwOwogICAgbGV0IGRlbm9taW5hdG9yID0gMDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7CiAgICAgICAgcG93MSAqPSAwLjgxOwogICAgICAgIHBvdzIgKj0gMC45OwogICAgICAgIG51bWVyYXRvciArPSBwb3cxOwogICAgICAgIGRlbm9taW5hdG9yICs9IHBvdzI7CiAgICB9CiAgICByZXR1cm4gTWF0aC5zcXJ0KG51bWVyYXRvcikgLyBkZW5vbWluYXRvcjsKfQpmdW5jdGlvbiBmKG4pIHsKICAgIHJldHVybiAoKGJpZ2YobikgLSBmaW5mKSAvIChiaWdmKDEpIC0gZmluZikpICogMTIwMC4wOwp9Ci8qKgogKiBjYWxjdWxhdGUgdW5wb3NpdGl2aXplZCByYXRpbmcgZnJvbSBwZXJmb3JtYW5jZSBoaXN0b3J5CiAqIEBwYXJhbSB7TnVtYmVyW119IFtoaXN0b3J5XSBwZXJmb3JtYW5jZSBoaXN0b3J5IHdpdGggYXNjZW5kaW5nIG9yZGVyCiAqIEByZXR1cm5zIHtOdW1iZXJ9IHVucG9zaXRpdml6ZWQgcmF0aW5nCiAqLwpmdW5jdGlvbiBjYWxjUmF0aW5nRnJvbUhpc3RvcnkoaGlzdG9yeSkgewogICAgY29uc3QgbiA9IGhpc3RvcnkubGVuZ3RoOwogICAgbGV0IHBvdyA9IDE7CiAgICBsZXQgbnVtZXJhdG9yID0gMC4wOwogICAgbGV0IGRlbm9taW5hdG9yID0gMC4wOwogICAgZm9yIChsZXQgaSA9IG4gLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIHBvdyAqPSAwLjk7CiAgICAgICAgbnVtZXJhdG9yICs9IE1hdGgucG93KDIsIGhpc3RvcnlbaV0gLyA4MDAuMCkgKiBwb3c7CiAgICAgICAgZGVub21pbmF0b3IgKz0gcG93OwogICAgfQogICAgcmV0dXJuIE1hdGgubG9nMihudW1lcmF0b3IgLyBkZW5vbWluYXRvcikgKiA4MDAuMCAtIGYobik7Cn0KLyoqCiAqIGNhbGN1bGF0ZSB1bnBvc2l0aXZpemVkIHJhdGluZyBmcm9tIGxhc3Qgc3RhdGUKICogQHBhcmFtIHtOdW1iZXJ9IFtsYXN0XSBsYXN0IHVucG9zaXRpdml6ZWQgcmF0aW5nCiAqIEBwYXJhbSB7TnVtYmVyfSBbcGVyZl0gcGVyZm9ybWFuY2UKICogQHBhcmFtIHtOdW1iZXJ9IFtyYXRlZE1hdGNoZXNdIGNvdW50IG9mIHBhcnRpY2lwYXRlZCByYXRlZCBjb250ZXN0CiAqIEByZXR1cm5zIHtudW1iZXJ9IGVzdGltYXRlZCB1bnBvc2l0aXZpemVkIHJhdGluZwogKi8KZnVuY3Rpb24gY2FsY1JhdGluZ0Zyb21MYXN0KGxhc3QsIHBlcmYsIHJhdGVkTWF0Y2hlcykgewogICAgaWYgKHJhdGVkTWF0Y2hlcyA9PT0gMCkKICAgICAgICByZXR1cm4gcGVyZiAtIDEyMDA7CiAgICBsYXN0ICs9IGYocmF0ZWRNYXRjaGVzKTsKICAgIGNvbnN0IHdlaWdodCA9IDkgLSA5ICogTWF0aC5wb3coMC45LCByYXRlZE1hdGNoZXMpOwogICAgY29uc3QgbnVtZXJhdG9yID0gd2VpZ2h0ICogTWF0aC5wb3coMiwgKGxhc3QgLyA4MDAuMCkpICsgTWF0aC5wb3coMiwgKHBlcmYgLyA4MDAuMCkpOwogICAgY29uc3QgZGVub21pbmF0b3IgPSAxICsgd2VpZ2h0OwogICAgcmV0dXJuIE1hdGgubG9nMihudW1lcmF0b3IgLyBkZW5vbWluYXRvcikgKiA4MDAuMCAtIGYocmF0ZWRNYXRjaGVzICsgMSk7Cn0KLyoqCiAqICgtaW5mLCBpbmYpIC0+ICgwLCBpbmYpCiAqIEBwYXJhbSB7TnVtYmVyfSBbcmF0aW5nXSB1bnBvc2l0aXZpemVkIHJhdGluZwogKiBAcmV0dXJucyB7bnVtYmVyfSBwb3NpdGl2aXplZCByYXRpbmcKICovCmZ1bmN0aW9uIHBvc2l0aXZpemVSYXRpbmcocmF0aW5nKSB7CiAgICBpZiAocmF0aW5nID49IDQwMC4wKSB7CiAgICAgICAgcmV0dXJuIHJhdGluZzsKICAgIH0KICAgIHJldHVybiA0MDAuMCAqIE1hdGguZXhwKChyYXRpbmcgLSA0MDAuMCkgLyA0MDAuMCk7Cn0KLyoqCiAqICgwLCBpbmYpIC0+ICgtaW5mLCBpbmYpCiAqIEBwYXJhbSB7TnVtYmVyfSBbcmF0aW5nXSBwb3NpdGl2aXplZCByYXRpbmcKICogQHJldHVybnMge251bWJlcn0gdW5wb3NpdGl2aXplZCByYXRpbmcKICovCmZ1bmN0aW9uIHVucG9zaXRpdml6ZVJhdGluZyhyYXRpbmcpIHsKICAgIGlmIChyYXRpbmcgPj0gNDAwLjApIHsKICAgICAgICByZXR1cm4gcmF0aW5nOwogICAgfQogICAgcmV0dXJuIDQwMC4wICsgNDAwLjAgKiBNYXRoLmxvZyhyYXRpbmcgLyA0MDAuMCk7Cn0KLyoqCiAqIGNhbGN1bGF0ZSB0aGUgcGVyZm9ybWFuY2UgcmVxdWlyZWQgdG8gcmVhY2ggYSB0YXJnZXQgcmF0ZQogKiBAcGFyYW0ge051bWJlcn0gW3RhcmdldFJhdGluZ10gdGFyZ2V0ZWQgdW5wb3NpdGl2aXplZCByYXRpbmcKICogQHBhcmFtIHtOdW1iZXJbXX0gW2hpc3RvcnldIHBlcmZvcm1hbmNlIGhpc3Rvcnkgd2l0aCBhc2NlbmRpbmcgb3JkZXIKICogQHJldHVybnMge251bWJlcn0gcGVyZm9ybWFuY2UKICovCmZ1bmN0aW9uIGNhbGNSZXF1aXJlZFBlcmZvcm1hbmNlKHRhcmdldFJhdGluZywgaGlzdG9yeSkgewogICAgbGV0IHZhbGlkID0gMTAwMDAuMDsKICAgIGxldCBpbnZhbGlkID0gLTEwMDAwLjA7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgKytpKSB7CiAgICAgICAgY29uc3QgbWlkID0gKGludmFsaWQgKyB2YWxpZCkgLyAyOwogICAgICAgIGNvbnN0IHJhdGluZyA9IE1hdGgucm91bmQoY2FsY1JhdGluZ0Zyb21IaXN0b3J5KGhpc3RvcnkuY29uY2F0KFttaWRdKSkpOwogICAgICAgIGlmICh0YXJnZXRSYXRpbmcgPD0gcmF0aW5nKQogICAgICAgICAgICB2YWxpZCA9IG1pZDsKICAgICAgICBlbHNlCiAgICAgICAgICAgIGludmFsaWQgPSBtaWQ7CiAgICB9CiAgICByZXR1cm4gdmFsaWQ7Cn0KY29uc3QgY29sb3JOYW1lcyA9IFsidW5yYXRlZCIsICJncmF5IiwgImJyb3duIiwgImdyZWVuIiwgImN5YW4iLCAiYmx1ZSIsICJ5ZWxsb3ciLCAib3JhbmdlIiwgInJlZCJdOwpmdW5jdGlvbiBnZXRDb2xvcihyYXRpbmcpIHsKICAgIGNvbnN0IGNvbG9ySW5kZXggPSByYXRpbmcgPiAwID8gTWF0aC5taW4oTWF0aC5mbG9vcihyYXRpbmcgLyA0MDApICsgMSwgOCkgOiAwOwogICAgcmV0dXJuIGNvbG9yTmFtZXNbY29sb3JJbmRleF07Cn0KCmNsYXNzIE9uRGVtYW5kUmVzdWx0cyBleHRlbmRzIFJlc3VsdHMgewogICAgY29uc3RydWN0b3IoY29udGVzdCwgdGVtcGxhdGVSZXN1bHRzKSB7CiAgICAgICAgc3VwZXIoKTsKICAgICAgICB0aGlzLkNvbnRlc3QgPSBjb250ZXN0OwogICAgICAgIHRoaXMuVGVtcGxhdGVSZXN1bHRzID0gdGVtcGxhdGVSZXN1bHRzOwogICAgfQogICAgZ2V0VXNlclJlc3VsdCh1c2VyU2NyZWVuTmFtZSkgewogICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuVGVtcGxhdGVSZXN1bHRzLCB1c2VyU2NyZWVuTmFtZSkpCiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIGNvbnN0IGJhc2VSZXN1bHRzID0gdGhpcy5UZW1wbGF0ZVJlc3VsdHNbdXNlclNjcmVlbk5hbWVdOwogICAgICAgIGlmICghYmFzZVJlc3VsdHMpCiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIGlmICghYmFzZVJlc3VsdHMuUGVyZm9ybWFuY2UpIHsKICAgICAgICAgICAgYmFzZVJlc3VsdHMuSW5uZXJQZXJmb3JtYW5jZSA9IHRoaXMuQ29udGVzdC5nZXRJbm5lclBlcmYoYmFzZVJlc3VsdHMuUmF0ZWRSYW5rKTsKICAgICAgICAgICAgYmFzZVJlc3VsdHMuUGVyZm9ybWFuY2UgPSBNYXRoLm1pbihiYXNlUmVzdWx0cy5Jbm5lclBlcmZvcm1hbmNlLCB0aGlzLkNvbnRlc3QucGVyZkxpbWl0KTsKICAgICAgICAgICAgYmFzZVJlc3VsdHMuTmV3UmF0aW5nID0gTWF0aC5yb3VuZChwb3NpdGl2aXplUmF0aW5nKGNhbGNSYXRpbmdGcm9tTGFzdCh1bnBvc2l0aXZpemVSYXRpbmcoYmFzZVJlc3VsdHMuT2xkUmF0aW5nKSwgYmFzZVJlc3VsdHMuUGVyZm9ybWFuY2UsIGJhc2VSZXN1bHRzLkNvbXBldGl0aW9ucykpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJhc2VSZXN1bHRzOwogICAgfQp9CgpjbGFzcyBGaXhlZFJlc3VsdHMgZXh0ZW5kcyBSZXN1bHRzIHsKICAgIGNvbnN0cnVjdG9yKHJlc3VsdHMpIHsKICAgICAgICBzdXBlcigpOwogICAgICAgIHRoaXMucmVzdWx0c0RpYyA9IHt9OwogICAgICAgIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0KSA9PiB7CiAgICAgICAgICAgIHRoaXMucmVzdWx0c0RpY1tyZXN1bHQuVXNlclNjcmVlbk5hbWVdID0gcmVzdWx0OwogICAgICAgIH0pOwogICAgfQogICAgZ2V0VXNlclJlc3VsdCh1c2VyU2NyZWVuTmFtZSkgewogICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5yZXN1bHRzRGljLCB1c2VyU2NyZWVuTmFtZSkKICAgICAgICAgICAgPyB0aGlzLnJlc3VsdHNEaWNbdXNlclNjcmVlbk5hbWVdCiAgICAgICAgICAgIDogbnVsbDsKICAgIH0KfQoKY2xhc3MgUHJlZGljdG9yTW9kZWwgewogICAgY29uc3RydWN0b3IobW9kZWwpIHsKICAgICAgICB0aGlzLmVuYWJsZWQgPSBtb2RlbC5lbmFibGVkOwogICAgICAgIHRoaXMuY29udGVzdCA9IG1vZGVsLmNvbnRlc3Q7CiAgICAgICAgdGhpcy5oaXN0b3J5ID0gbW9kZWwuaGlzdG9yeTsKICAgICAgICB0aGlzLnVwZGF0ZUluZm9ybWF0aW9uKG1vZGVsLmluZm9ybWF0aW9uKTsKICAgICAgICB0aGlzLnVwZGF0ZURhdGEobW9kZWwucmFua1ZhbHVlLCBtb2RlbC5wZXJmVmFsdWUsIG1vZGVsLnJhdGVWYWx1ZSk7CiAgICB9CiAgICBzZXRFbmFibGUoc3RhdGUpIHsKICAgICAgICB0aGlzLmVuYWJsZWQgPSBzdGF0ZTsKICAgIH0KICAgIHVwZGF0ZUluZm9ybWF0aW9uKGluZm9ybWF0aW9uKSB7CiAgICAgICAgdGhpcy5pbmZvcm1hdGlvbiA9IGluZm9ybWF0aW9uOwogICAgfQogICAgdXBkYXRlRGF0YShyYW5rVmFsdWUsIHBlcmZWYWx1ZSwgcmF0ZVZhbHVlKSB7CiAgICAgICAgdGhpcy5yYW5rVmFsdWUgPSByYW5rVmFsdWU7CiAgICAgICAgdGhpcy5wZXJmVmFsdWUgPSBwZXJmVmFsdWU7CiAgICAgICAgdGhpcy5yYXRlVmFsdWUgPSByYXRlVmFsdWU7CiAgICB9Cn0KCmNsYXNzIENhbGNGcm9tUmFua01vZGVsIGV4dGVuZHMgUHJlZGljdG9yTW9kZWwgewogICAgdXBkYXRlRGF0YShyYW5rVmFsdWUsIHBlcmZWYWx1ZSwgcmF0ZVZhbHVlKSB7CiAgICAgICAgcGVyZlZhbHVlID0gdGhpcy5jb250ZXN0LmdldFBlcmYocmFua1ZhbHVlKTsKICAgICAgICByYXRlVmFsdWUgPSBwb3NpdGl2aXplUmF0aW5nKGNhbGNSYXRpbmdGcm9tSGlzdG9yeSh0aGlzLmhpc3RvcnkuY29uY2F0KFtwZXJmVmFsdWVdKSkpOwogICAgICAgIHN1cGVyLnVwZGF0ZURhdGEocmFua1ZhbHVlLCBwZXJmVmFsdWUsIHJhdGVWYWx1ZSk7CiAgICB9Cn0KCmNsYXNzIENhbGNGcm9tUGVyZk1vZGVsIGV4dGVuZHMgUHJlZGljdG9yTW9kZWwgewogICAgdXBkYXRlRGF0YShyYW5rVmFsdWUsIHBlcmZWYWx1ZSwgcmF0ZVZhbHVlKSB7CiAgICAgICAgcmFua1ZhbHVlID0gdGhpcy5jb250ZXN0LmdldFJhdGVkUmFuayhwZXJmVmFsdWUpOwogICAgICAgIHJhdGVWYWx1ZSA9IHBvc2l0aXZpemVSYXRpbmcoY2FsY1JhdGluZ0Zyb21IaXN0b3J5KHRoaXMuaGlzdG9yeS5jb25jYXQoW3BlcmZWYWx1ZV0pKSk7CiAgICAgICAgc3VwZXIudXBkYXRlRGF0YShyYW5rVmFsdWUsIHBlcmZWYWx1ZSwgcmF0ZVZhbHVlKTsKICAgIH0KfQoKY2xhc3MgQ2FsY0Zyb21SYXRlTW9kZWwgZXh0ZW5kcyBQcmVkaWN0b3JNb2RlbCB7CiAgICB1cGRhdGVEYXRhKHJhbmtWYWx1ZSwgcGVyZlZhbHVlLCByYXRlVmFsdWUpIHsKICAgICAgICBwZXJmVmFsdWUgPSBjYWxjUmVxdWlyZWRQZXJmb3JtYW5jZSh1bnBvc2l0aXZpemVSYXRpbmcocmF0ZVZhbHVlKSwgdGhpcy5oaXN0b3J5KTsKICAgICAgICByYW5rVmFsdWUgPSB0aGlzLmNvbnRlc3QuZ2V0UmF0ZWRSYW5rKHBlcmZWYWx1ZSk7CiAgICAgICAgc3VwZXIudXBkYXRlRGF0YShyYW5rVmFsdWUsIHBlcmZWYWx1ZSwgcmF0ZVZhbHVlKTsKICAgIH0KfQoKZnVuY3Rpb24gcm91bmRWYWx1ZSh2YWx1ZSwgbnVtRGlnaXRzKSB7CiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIE1hdGgucG93KDEwLCBudW1EaWdpdHMpKSAvIE1hdGgucG93KDEwLCBudW1EaWdpdHMpOwp9CgpjbGFzcyBDb250ZXN0SW5mb3JtYXRpb24gewogICAgY29uc3RydWN0b3IoY2FuUGFydGljaXBhdGVSYW5nZSwgcmF0ZWRSYW5nZSwgcGVuYWx0eSwgaXNIZXVyaXN0aWMpIHsKICAgICAgICB0aGlzLkNhblBhcnRpY2lwYXRlUmFuZ2UgPSBjYW5QYXJ0aWNpcGF0ZVJhbmdlOwogICAgICAgIHRoaXMuUmF0ZWRSYW5nZSA9IHJhdGVkUmFuZ2U7CiAgICAgICAgdGhpcy5QZW5hbHR5ID0gcGVuYWx0eTsKICAgICAgICB0aGlzLmlzSGV1cmlzdGljID0gaXNIZXVyaXN0aWM7CiAgICB9Cn0KZnVuY3Rpb24gcGFyc2VSYW5nZVN0cmluZyhzKSB7CiAgICBzID0gcy50cmltKCk7CiAgICBpZiAocyA9PT0gIi0iKQogICAgICAgIHJldHVybiBbMCwgLTFdOwogICAgaWYgKHMgPT09ICJBbGwiKQogICAgICAgIHJldHVybiBbMCwgSW5maW5pdHldOwogICAgaWYgKCEvWy1+XS8udGVzdChzKSkKICAgICAgICByZXR1cm4gWzAsIC0xXTsKICAgIGNvbnN0IHJlcyA9IHMuc3BsaXQoL1stfl0vKS5tYXAoKHgpID0+IHBhcnNlSW50KHgudHJpbSgpKSk7CiAgICBpZiAoaXNOYU4ocmVzWzBdKSkKICAgICAgICByZXNbMF0gPSAwOwogICAgaWYgKGlzTmFOKHJlc1sxXSkpCiAgICAgICAgcmVzWzFdID0gSW5maW5pdHk7CiAgICByZXR1cm4gcmVzOwp9CmZ1bmN0aW9uIHBhcnNlRHVyYXRpb25TdHJpbmcocykgewogICAgaWYgKHMgPT09ICJOb25lIiB8fCBzID09PSAi44Gq44GXIikKICAgICAgICByZXR1cm4gMDsKICAgIGlmICghLyhcZCtbXlxkXSspLy50ZXN0KHMpKQogICAgICAgIHJldHVybiBOYU47CiAgICBjb25zdCBkdXJhdGlvbkRpYyA9IHsKICAgICAgICDml6U6IDI0ICogNjAgKiA2MCAqIDEwMDAsCiAgICAgICAgZGF5OiAyNCAqIDYwICogNjAgKiAxMDAwLAogICAgICAgIGRheXM6IDI0ICogNjAgKiA2MCAqIDEwMDAsCiAgICAgICAg5pmC6ZaTOiA2MCAqIDYwICogMTAwMCwKICAgICAgICBob3VyOiA2MCAqIDYwICogMTAwMCwKICAgICAgICBob3VyczogNjAgKiA2MCAqIDEwMDAsCiAgICAgICAg5YiGOiA2MCAqIDEwMDAsCiAgICAgICAgbWludXRlOiA2MCAqIDEwMDAsCiAgICAgICAgbWludXRlczogNjAgKiAxMDAwLAogICAgICAgIOenkjogMTAwMCwKICAgICAgICBzZWNvbmQ6IDEwMDAsCiAgICAgICAgc2Vjb25kczogMTAwMCwKICAgIH07CiAgICBsZXQgcmVzID0gMDsKICAgIHMubWF0Y2goLyhcZCtbXlxkXSspL2cpLmZvckVhY2goKHgpID0+IHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgY29uc3QgdHJpbW1lZCA9IHgudHJpbSgpOwogICAgICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KC9cZCsvLmV4ZWModHJpbW1lZClbMF0pOwogICAgICAgIGNvbnN0IHVuaXQgPSAvW15cZF0rLy5leGVjKHRyaW1tZWQpWzBdOwogICAgICAgIGNvbnN0IGR1cmF0aW9uID0gKF9hID0gZHVyYXRpb25EaWNbdW5pdF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7CiAgICAgICAgcmVzICs9IG51bSAqIGR1cmF0aW9uOwogICAgfSk7CiAgICByZXR1cm4gcmVzOwp9CmZ1bmN0aW9uIGZldGNoSnNvbkRhdGFBc3luYyh1cmwpIHsKICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaCh1cmwpOwogICAgICAgIGlmIChyZXNwb25zZS5vaykKICAgICAgICAgICAgcmV0dXJuICh5aWVsZCByZXNwb25zZS5qc29uKCkpOwogICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVxdWVzdCB0byAke3VybH0gcmV0dXJucyAke3Jlc3BvbnNlLnN0YXR1c31gKTsKICAgIH0pOwp9CmZ1bmN0aW9uIGZldGNoVGV4dERhdGFBc3luYyh1cmwpIHsKICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaCh1cmwpOwogICAgICAgIGlmIChyZXNwb25zZS5vaykKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlcXVlc3QgdG8gJHt1cmx9IHJldHVybnMgJHtyZXNwb25zZS5zdGF0dXN9YCk7CiAgICB9KTsKfQpmdW5jdGlvbiBnZXRTdGFuZGluZ3NEYXRhQXN5bmMoY29udGVzdFNjcmVlbk5hbWUpIHsKICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgcmV0dXJuIHlpZWxkIGZldGNoSnNvbkRhdGFBc3luYyhgaHR0cHM6Ly9hdGNvZGVyLmpwL2NvbnRlc3RzLyR7Y29udGVzdFNjcmVlbk5hbWV9L3N0YW5kaW5ncy9qc29uYCk7CiAgICB9KTsKfQoKZnVuY3Rpb24gZ2V0QVBlcmZzRGF0YUFzeW5jKGNvbnRlc3RTY3JlZW5OYW1lKSB7CiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgIGxldCB1cmwgPSBgaHR0cHM6Ly9kYXRhLmFjLXByZWRpY3Rvci5jb20vYXBlcmZzLyR7Y29udGVzdFNjcmVlbk5hbWV9Lmpzb25gOwogICAgICAgIC8vIGlmIChjb250ZXN0U2NyZWVuTmFtZSA9PT0gImFyYzExOSIpIHVybCA9IGBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20va2V5LW1vb24vYWMtcHJlZGljdG9yLWRhdGEvbWFzdGVyL2FwZXJmcy8ke2NvbnRlc3RTY3JlZW5OYW1lfS5qc29uYDsKICAgICAgICByZXR1cm4geWllbGQgZmV0Y2hKc29uRGF0YUFzeW5jKHVybCk7CiAgICB9KTsKfQpmdW5jdGlvbiBnZXRSZXN1bHRzRGF0YUFzeW5jKGNvbnRlc3RTY3JlZW5OYW1lKSB7CiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgIHJldHVybiB5aWVsZCBmZXRjaEpzb25EYXRhQXN5bmMoYGh0dHBzOi8vYXRjb2Rlci5qcC9jb250ZXN0cy8ke2NvbnRlc3RTY3JlZW5OYW1lfS9yZXN1bHRzL2pzb25gKTsKICAgIH0pOwp9CmZ1bmN0aW9uIGdldEhpc3RvcnlEYXRhQXN5bmModXNlclNjcmVlbk5hbWUpIHsKICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgcmV0dXJuIHlpZWxkIGZldGNoSnNvbkRhdGFBc3luYyhgaHR0cHM6Ly9hdGNvZGVyLmpwL3VzZXJzLyR7dXNlclNjcmVlbk5hbWV9L2hpc3RvcnkvanNvbmApOwogICAgfSk7Cn0KZnVuY3Rpb24gZ2V0Q29udGVzdEluZm9ybWF0aW9uQXN5bmMoY29udGVzdFNjcmVlbk5hbWUpIHsKICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgY29uc3QgaHRtbCA9IHlpZWxkIGZldGNoVGV4dERhdGFBc3luYyhgaHR0cHM6Ly9hdGNvZGVyLmpwL2NvbnRlc3RzLyR7Y29udGVzdFNjcmVlbk5hbWV9YCk7CiAgICAgICAgY29uc3QgdG9wUGFnZURvbSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgInRleHQvaHRtbCIpOwogICAgICAgIGNvbnN0IGRhdGFQYXJhZ3JhcGggPSB0b3BQYWdlRG9tLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInNtYWxsIilbMF07CiAgICAgICAgY29uc3QgZGF0YSA9IEFycmF5LmZyb20oZGF0YVBhcmFncmFwaC5jaGlsZHJlbikubWFwKCh4KSA9PiB4LmlubmVySFRNTC5zcGxpdCgiOiIpWzFdLnRyaW0oKSk7CiAgICAgICAgY29uc3QgaXNBSEMgPSAvXmFoY1xkezN9JC8udGVzdChjb250ZXN0U2NyZWVuTmFtZSkgfHwgaHRtbC5pbmNsdWRlcygiVGhpcyBjb250ZXN0IGlzIHJhdGVkIGZvciBBSEMgcmF0aW5nIik7CiAgICAgICAgcmV0dXJuIG5ldyBDb250ZXN0SW5mb3JtYXRpb24ocGFyc2VSYW5nZVN0cmluZyhkYXRhWzBdKSwgcGFyc2VSYW5nZVN0cmluZyhkYXRhWzFdKSwgcGFyc2VEdXJhdGlvblN0cmluZyhkYXRhWzJdKSwgaXNBSEMpOwogICAgfSk7Cn0KLyoqCiAqIOODpuODvOOCtuODvOOBruODkeODleOCqeODvOODnuODs+OCueWxpeattOOCkuaZgumWk+aYh+mghuOBp+WPluW+lwogKi8KZnVuY3Rpb24gZ2V0UGVyZm9ybWFuY2VIaXN0b3JpZXMoaGlzdG9yeSkgewogICAgY29uc3Qgb25seVJhdGVkID0gaGlzdG9yeS5maWx0ZXIoKHgpID0+IHguSXNSYXRlZCk7CiAgICBvbmx5UmF0ZWQuc29ydCgoYSwgYikgPT4gewogICAgICAgIHJldHVybiBuZXcgRGF0ZShhLkVuZFRpbWUpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGIuRW5kVGltZSkuZ2V0VGltZSgpOwogICAgfSk7CiAgICByZXR1cm4gb25seVJhdGVkLm1hcCgoeCkgPT4geC5QZXJmb3JtYW5jZSk7Cn0KCi8qKgoqIOOCteOCpOODieODoeODi+ODpeODvOOBq+i/veWKoOOBleOCjOOCi+imgee0oOOBruOCr+ODqeOCuQoqLwpjbGFzcyBTaWRlTWVudUVsZW1lbnQgewogICAgc2hvdWxkRGlzcGxheWVkKHVybCkgewogICAgICAgIHJldHVybiB0aGlzLm1hdGNoLnRlc3QodXJsKTsKICAgIH0KICAgIC8qKgogICAgICog6KaB57Sg44GuSFRNTOOCkuWPluW+lwogICAgICovCiAgICBHZXRIVE1MKCkgewogICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz0ibWVudS13cmFwcGVyIj4KICAgIDxkaXYgY2xhc3M9Im1lbnUtaGVhZGVyIj4KICAgICAgICA8aDQgY2xhc3M9InNpZGVtZW51LXR4dCI+JHt0aGlzLnRpdGxlfTxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLW1lbnUtdXAiIHN0eWxlPSJmbG9hdDogcmlnaHQiPjwvc3Bhbj48L2g0PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtZW51LWJveCI+PGRpdiBjbGFzcz0ibWVudS1jb250ZW50IiBpZD0iJHt0aGlzLmlkfSI+JHt0aGlzLmRvY3VtZW50fTwvZGl2PjwvZGl2Pgo8L2Rpdj5gOwogICAgfQp9CgpmdW5jdGlvbiBnZXRHbG9iYWxWYWxzKCkgewogICAgY29uc3Qgc2NyaXB0ID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoImhlYWQgc2NyaXB0Om5vdChbc3JjXSkiKV0ubWFwKCh4KSA9PiB4LmlubmVySFRNTCkuam9pbigiXG4iKTsKICAgIGNvbnN0IHJlcyA9IHt9OwogICAgc2NyaXB0Lm1hdGNoKC92YXIgW14gXSsgPSAuKyQvZ20pLmZvckVhY2goKHN0YXRlbWVudCkgPT4gewogICAgICAgIGNvbnN0IG1hdGNoID0gL3ZhciAoW14gXSspID0gKC4rKSQvbS5leGVjKHN0YXRlbWVudCk7CiAgICAgICAgZnVuY3Rpb24gc2FmZUV2YWwodmFsKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIHRyaW0odmFsKSB7CiAgICAgICAgICAgICAgICB3aGlsZSAodmFsLmVuZHNXaXRoKCI7IikgfHwgdmFsLmVuZHNXaXRoKCIgIikpCiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsLnN1YnN0cigwLCB2YWwubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgICAgICB3aGlsZSAodmFsLnN0YXJ0c1dpdGgoIiAiKSkKICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwuc3Vic3RyKDEsIHZhbC5sZW5ndGggLSAxKTsKICAgICAgICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gaXNTdHJpbmdUb2tlbih2YWwpIHsKICAgICAgICAgICAgICAgIHJldHVybiAxIDwgdmFsLmxlbmd0aCAmJiB2YWwuc3RhcnRzV2l0aCgnIicpICYmIHZhbC5lbmRzV2l0aCgnIicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGV2YWxTdHJpbmdUb2tlbih2YWwpIHsKICAgICAgICAgICAgICAgIGlmICghaXNTdHJpbmdUb2tlbih2YWwpKQogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpOwogICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5zdWJzdHIoMSwgdmFsLmxlbmd0aCAtIDIpOyAvLyBUT0RPOiBwYXJzZSBlc2NhcGUKICAgICAgICAgICAgfQogICAgICAgICAgICB2YWwgPSB0cmltKHZhbCk7CiAgICAgICAgICAgIGlmIChpc1N0cmluZ1Rva2VuKHZhbCkpCiAgICAgICAgICAgICAgICByZXR1cm4gZXZhbFN0cmluZ1Rva2VuKHZhbCk7CiAgICAgICAgICAgIGlmICh2YWwuc3RhcnRzV2l0aCgibW9tZW50KCIpKQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGV2YWxTdHJpbmdUb2tlbih0cmltKHZhbC5zdWJzdHIoNywgdmFsLmxlbmd0aCAtICg3ICsgMSkpKSkpOwogICAgICAgICAgICByZXR1cm4gdmFsOwogICAgICAgIH0KICAgICAgICByZXNbbWF0Y2hbMV1dID0gc2FmZUV2YWwobWF0Y2hbMl0pOwogICAgfSk7CiAgICByZXR1cm4gcmVzOwp9CmNvbnN0IGdsb2JhbFZhbHMgPSBnZXRHbG9iYWxWYWxzKCk7CmNvbnN0IHVzZXJTY3JlZW5OYW1lID0gZ2xvYmFsVmFsc1sidXNlclNjcmVlbk5hbWUiXTsKY29uc3QgY29udGVzdFNjcmVlbk5hbWUgPSBnbG9iYWxWYWxzWyJjb250ZXN0U2NyZWVuTmFtZSJdOwpjb25zdCBzdGFydFRpbWUgPSBnbG9iYWxWYWxzWyJzdGFydFRpbWUiXTsKCmNsYXNzIEFsbFJvd1VwZGF0ZXIgewogICAgdXBkYXRlKHRhYmxlKSB7CiAgICAgICAgQXJyYXkuZnJvbSh0YWJsZS5yb3dzKS5mb3JFYWNoKChyb3cpID0+IHRoaXMucm93TW9kaWZpZXIubW9kaWZ5Um93KHJvdykpOwogICAgfQp9CgpjbGFzcyBTdGFuZGluZ3NSb3dNb2RpZmllciB7CiAgICBpc0hlYWRlcihyb3cpIHsKICAgICAgICByZXR1cm4gcm93LnBhcmVudEVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICJ0aGVhZCI7CiAgICB9CiAgICBpc0Zvb3Rlcihyb3cpIHsKICAgICAgICByZXR1cm4gcm93LmZpcnN0RWxlbWVudENoaWxkLmhhc0F0dHJpYnV0ZSgiY29sc3BhbiIpICYmIHJvdy5maXJzdEVsZW1lbnRDaGlsZC5nZXRBdHRyaWJ1dGUoImNvbHNwYW4iKSA9PSAiMyI7CiAgICB9CiAgICBtb2RpZnlSb3cocm93KSB7CiAgICAgICAgaWYgKHRoaXMuaXNIZWFkZXIocm93KSkKICAgICAgICAgICAgdGhpcy5tb2RpZnlIZWFkZXIocm93KTsKICAgICAgICBlbHNlIGlmICh0aGlzLmlzRm9vdGVyKHJvdykpCiAgICAgICAgICAgIHRoaXMubW9kaWZ5Rm9vdGVyKHJvdyk7CiAgICAgICAgZWxzZQogICAgICAgICAgICB0aGlzLm1vZGlmeUNvbnRlbnQocm93KTsKICAgIH0KfQoKY2xhc3MgUGVyZkFuZFJhdGVDaGFuZ2VBcHBlbmRlciBleHRlbmRzIFN0YW5kaW5nc1Jvd01vZGlmaWVyIHsKICAgIG1vZGlmeUNvbnRlbnQoY29udGVudCkgewogICAgICAgIHZhciBfYTsKICAgICAgICB0aGlzLnJlbW92ZU9sZEVsZW0oY29udGVudCk7CiAgICAgICAgaWYgKGNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQudGV4dENvbnRlbnQgPT09ICItIikgewogICAgICAgICAgICBjb25zdCBsb25nQ2VsbCA9IGNvbnRlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgic3RhbmRpbmdzLXJlc3VsdCIpWzBdOwogICAgICAgICAgICBsb25nQ2VsbC5zZXRBdHRyaWJ1dGUoImNvbHNwYW4iLCAocGFyc2VJbnQobG9uZ0NlbGwuZ2V0QXR0cmlidXRlKCJjb2xzcGFuIikpICsgMikudG9TdHJpbmcoKSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgdXNlclNjcmVlbk5hbWUgPSBjb250ZW50LnF1ZXJ5U2VsZWN0b3IoIi5zdGFuZGluZ3MtdXNlcm5hbWUgLnVzZXJuYW1lIHNwYW4iKS50ZXh0Q29udGVudDsKICAgICAgICBjb25zdCByZXN1bHQgPSAoX2EgPSB0aGlzLnJlc3VsdHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRVc2VyUmVzdWx0KHVzZXJTY3JlZW5OYW1lKTsKICAgICAgICBjb25zdCBwZXJmRWxlbSA9IChyZXN1bHQgPT09IG51bGwgfHwgcmVzdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXN1bHQuSXNTdWJtaXR0ZWQpID8gdGhpcy5nZXRSYXRpbmdTcGFuKE1hdGgucm91bmQocG9zaXRpdml6ZVJhdGluZyhyZXN1bHQuUGVyZm9ybWFuY2UpKSkKICAgICAgICAgICAgOiAiLSI7CiAgICAgICAgY29uc3QgcmF0aW5nRWxlbSA9IHJlc3VsdAogICAgICAgICAgICA/IChyZXN1bHQgPT09IG51bGwgfHwgcmVzdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXN1bHQuSXNSYXRlZCkgJiYgKHRoaXMgPT09IG51bGwgfHwgdGhpcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhpcy5pc1JhdGVkKQogICAgICAgICAgICAgICAgPyB0aGlzLmdldENoYW5nZWRSYXRpbmdFbGVtKHJlc3VsdC5PbGRSYXRpbmcsIHJlc3VsdC5OZXdSYXRpbmcpCiAgICAgICAgICAgICAgICA6IHRoaXMuZ2V0VW5yYXRlZEVsZW0ocmVzdWx0Lk9sZFJhdGluZykKICAgICAgICAgICAgOiAiLSI7CiAgICAgICAgY29udGVudC5pbnNlcnRBZGphY2VudEhUTUwoImJlZm9yZWVuZCIsIGA8dGQgY2xhc3M9InN0YW5kaW5ncy1yZXN1bHQgc3RhbmRpbmdzLXBlcmYiPiR7cGVyZkVsZW19PC90ZD5gKTsKICAgICAgICBjb250ZW50Lmluc2VydEFkamFjZW50SFRNTCgiYmVmb3JlZW5kIiwgYDx0ZCBjbGFzcz0ic3RhbmRpbmdzLXJlc3VsdCBzdGFuZGluZ3MtcmF0ZSI+JHtyYXRpbmdFbGVtfTwvdGQ+YCk7CiAgICB9CiAgICBnZXRDaGFuZ2VkUmF0aW5nRWxlbShvbGRSYXRlLCBuZXdSYXRlKSB7CiAgICAgICAgY29uc3Qgb2xkUmF0ZVNwYW4gPSB0aGlzLmdldFJhdGluZ1NwYW4ob2xkUmF0ZSk7CiAgICAgICAgY29uc3QgbmV3UmF0ZVNwYW4gPSB0aGlzLmdldFJhdGluZ1NwYW4obmV3UmF0ZSk7CiAgICAgICAgY29uc3QgZGlmZiA9IHRoaXMudG9TaWduZWRTdHJpbmcobmV3UmF0ZSAtIG9sZFJhdGUpOwogICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9ImJvbGQiPiR7b2xkUmF0ZVNwYW59PC9zcGFuPiDihpIgPHNwYW4gY2xhc3M9ImJvbGQiPiR7bmV3UmF0ZVNwYW59PC9zcGFuPiA8c3BhbiBjbGFzcz0iZ3JleSI+KCR7ZGlmZn0pPC9zcGFuPmA7CiAgICB9CiAgICB0b1NpZ25lZFN0cmluZyhuKSB7CiAgICAgICAgcmV0dXJuIGAke24gPj0gMCA/ICIrIiA6ICIifSR7bn1gOwogICAgfQogICAgZ2V0VW5yYXRlZEVsZW0ocmF0ZSkgewogICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9ImJvbGQiPiR7dGhpcy5nZXRSYXRpbmdTcGFuKHJhdGUpfTwvc3Bhbj4gPHNwYW4gY2xhc3M9ImdyZXkiPih1bnJhdGVkKTwvc3Bhbj5gOwogICAgfQogICAgZ2V0UmF0aW5nU3BhbihyYXRlKSB7CiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz0idXNlci0ke2dldENvbG9yKHJhdGUpfSI+JHtyYXRlfTwvc3Bhbj5gOwogICAgfQogICAgbW9kaWZ5Rm9vdGVyKGZvb3RlcikgewogICAgICAgIHRoaXMucmVtb3ZlT2xkRWxlbShmb290ZXIpOwogICAgICAgIGZvb3Rlci5pbnNlcnRBZGphY2VudEhUTUwoImJlZm9yZWVuZCIsICc8dGQgY2xhc3M9InN0YW5kaW5ncy1yZXN1bHQgc3RhbmRpbmdzLXBlcmYgc3RhbmRpbmdzLXJhdGUiIGNvbHNwYW49IjIiPi08L3RkPicpOwogICAgfQogICAgbW9kaWZ5SGVhZGVyKGhlYWRlcikgewogICAgICAgIHRoaXMucmVtb3ZlT2xkRWxlbShoZWFkZXIpOwogICAgICAgIGhlYWRlci5pbnNlcnRBZGphY2VudEhUTUwoImJlZm9yZWVuZCIsICc8dGggY2xhc3M9InN0YW5kaW5ncy1yZXN1bHQtdGggc3RhbmRpbmdzLXBlcmYiIHN0eWxlPSJ3aWR0aDo4NHB4O21pbi13aWR0aDo4NHB4OyI+cGVyZjwvdGg+PHRoIGNsYXNzPSJzdGFuZGluZ3MtcmVzdWx0LXRoIHN0YW5kaW5ncy1yYXRlIiBzdHlsZT0id2lkdGg6MTY4cHg7bWluLXdpZHRoOjE2OHB4OyI+44Os44O844OI5aSJ5YyWPC90aD4nKTsKICAgIH0KICAgIHJlbW92ZU9sZEVsZW0ocm93KSB7CiAgICAgICAgcm93LnF1ZXJ5U2VsZWN0b3JBbGwoIi5zdGFuZGluZ3MtcGVyZiwgLnN0YW5kaW5ncy1yYXRlIikuZm9yRWFjaCgoZWxlbSkgPT4gZWxlbS5yZW1vdmUoKSk7CiAgICB9Cn0KCmNsYXNzIFByZWRpY3RvckVsZW1lbnQgZXh0ZW5kcyBTaWRlTWVudUVsZW1lbnQgewogICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTsKICAgICAgICB0aGlzLmlkID0gInByZWRpY3RvciI7CiAgICAgICAgdGhpcy50aXRsZSA9ICJQcmVkaWN0b3IiOwogICAgICAgIHRoaXMubWF0Y2ggPSAvYXRjb2Rlci5qcFwvY29udGVzdHNcLy4rLzsKICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9tOwogICAgICAgIHRoaXMuaGlzdG9yeURhdGEgPSBbXTsKICAgICAgICB0aGlzLmNvbnRlc3RPblVwZGF0ZWQgPSBbXTsKICAgICAgICB0aGlzLnJlc3VsdHNPblVwZGF0ZWQgPSBbXTsKICAgIH0KICAgIHNldCBjb250ZXN0KHZhbCkgewogICAgICAgIHRoaXMuX2NvbnRlc3QgPSB2YWw7CiAgICAgICAgdGhpcy5jb250ZXN0T25VcGRhdGVkLmZvckVhY2goKGZ1bmMpID0+IGZ1bmModmFsKSk7CiAgICB9CiAgICBnZXQgY29udGVzdCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5fY29udGVzdDsKICAgIH0KICAgIHNldCByZXN1bHRzKHZhbCkgewogICAgICAgIHRoaXMuX3Jlc3VsdHMgPSB2YWw7CiAgICAgICAgdGhpcy5yZXN1bHRzT25VcGRhdGVkLmZvckVhY2goKGZ1bmMpID0+IGZ1bmModmFsKSk7CiAgICB9CiAgICBnZXQgcmVzdWx0cygpIHsKICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0czsKICAgIH0KICAgIGlzU3RhbmRpbmdzUGFnZSgpIHsKICAgICAgICByZXR1cm4gL3N0YW5kaW5ncyhbXi9dKik/JC8udGVzdChkb2N1bWVudC5sb2NhdGlvbi5ocmVmKTsKICAgIH0KICAgIGFmdGVyQXBwZW5kKCkgewogICAgICAgIGNvbnN0IGxvYWRlZCA9ICgpID0+ICEhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0YW5kaW5ncy10Ym9keSIpOwogICAgICAgIGlmICghdGhpcy5pc1N0YW5kaW5nc1BhZ2UoKSB8fCBsb2FkZWQoKSkgewogICAgICAgICAgICB2b2lkIHRoaXMuaW5pdGlhbGl6ZSgpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IGxvYWRpbmdFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInZ1ZS1zdGFuZGluZ3MiKS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJsb2FkaW5nLXNob3ciKVswXTsKICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7CiAgICAgICAgICAgIGlmIChsb2FkZWQoKSkKICAgICAgICAgICAgICAgIHZvaWQgdGhpcy5pbml0aWFsaXplKCk7CiAgICAgICAgfSkub2JzZXJ2ZShsb2FkaW5nRWxlbSwgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pOwogICAgfQogICAgaW5pdGlhbGl6ZSgpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICAgICAgY29uc3QgZmlyc3RDb250ZXN0RGF0ZSA9IG5ldyBEYXRlKDIwMTYsIDYsIDE2LCAyMSk7CiAgICAgICAgICAgIGNvbnN0IHByZWRpY3RvckVsZW1lbnRzID0gWwogICAgICAgICAgICAgICAgInByZWRpY3Rvci1pbnB1dC1yYW5rIiwKICAgICAgICAgICAgICAgICJwcmVkaWN0b3ItaW5wdXQtcGVyZiIsCiAgICAgICAgICAgICAgICAicHJlZGljdG9yLWlucHV0LXJhdGUiLAogICAgICAgICAgICAgICAgInByZWRpY3Rvci1jdXJyZW50IiwKICAgICAgICAgICAgICAgICJwcmVkaWN0b3ItcmVsb2FkIiwKICAgICAgICAgICAgXTsKICAgICAgICAgICAgY29uc3QgaXNTdGFuZGluZ3NQYWdlID0gdGhpcy5pc1N0YW5kaW5nc1BhZ2UoKTsKICAgICAgICAgICAgY29uc3QgY29udGVzdEluZm9ybWF0aW9uID0geWllbGQgZ2V0Q29udGVzdEluZm9ybWF0aW9uQXN5bmMoY29udGVzdFNjcmVlbk5hbWUpOwogICAgICAgICAgICBjb25zdCByb3dVcGRhdGVyID0gbmV3IFBlcmZBbmRSYXRlQ2hhbmdlQXBwZW5kZXIoKTsKICAgICAgICAgICAgdGhpcy5yZXN1bHRzT25VcGRhdGVkLnB1c2goKHZhbCkgPT4gewogICAgICAgICAgICAgICAgcm93VXBkYXRlci5yZXN1bHRzID0gdmFsOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy5jb250ZXN0T25VcGRhdGVkLnB1c2goKHZhbCkgPT4gewogICAgICAgICAgICAgICAgcm93VXBkYXRlci5pc1JhdGVkID0gdmFsLklzUmF0ZWQ7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zdCB0YWJsZVVwZGF0ZXIgPSBuZXcgQWxsUm93VXBkYXRlcigpOwogICAgICAgICAgICB0YWJsZVVwZGF0ZXIucm93TW9kaWZpZXIgPSByb3dVcGRhdGVyOwogICAgICAgICAgICBjb25zdCB0YWJsZUVsZW1lbnQgPSAoX2EgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3RhbmRpbmdzLXRib2R5IikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnRFbGVtZW50OwogICAgICAgICAgICBsZXQgbW9kZWwgPSBuZXcgUHJlZGljdG9yTW9kZWwoewogICAgICAgICAgICAgICAgcmFua1ZhbHVlOiAwLAogICAgICAgICAgICAgICAgcGVyZlZhbHVlOiAwLAogICAgICAgICAgICAgICAgcmF0ZVZhbHVlOiAwLAogICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsCiAgICAgICAgICAgICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnlEYXRhLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IChhcGVyZnMsIHN0YW5kaW5ncykgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgICAgICAgICAgdGhpcy5jb250ZXN0ID0gbmV3IENvbnRlc3QoY29udGVzdFNjcmVlbk5hbWUsIGNvbnRlc3RJbmZvcm1hdGlvbiwgc3RhbmRpbmdzLCBhcGVyZnMpOwogICAgICAgICAgICAgICAgbW9kZWwuY29udGVzdCA9IHRoaXMuY29udGVzdDsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlc3Quc3RhbmRpbmdzLkZpeGVkICYmIHRoaXMuY29udGVzdC5Jc1JhdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF3UmVzdWx0ID0geWllbGQgZ2V0UmVzdWx0c0RhdGFBc3luYyhjb250ZXN0U2NyZWVuTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgcmF3UmVzdWx0LnNvcnQoKGEsIGIpID0+IChhLlBsYWNlICE9PSBiLlBsYWNlID8gYS5QbGFjZSAtIGIuUGxhY2UgOiBiLk9sZFJhdGluZyAtIGEuT2xkUmF0aW5nKSk7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkU3RhbmRpbmdzRGF0YSA9IEFycmF5LmZyb20odGhpcy5jb250ZXN0LnN0YW5kaW5ncy5TdGFuZGluZ3NEYXRhKTsKICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVzdEluZm9ybWF0aW9uLmlzSGV1cmlzdGljKSBzb3J0ZWRTdGFuZGluZ3NEYXRhLmZpbHRlcigoeCkgPT4geC5Ub3RhbFJlc3VsdC5Db3VudCAhPT0gMCk7CiAgICAgICAgICAgICAgICAgICAgc29ydGVkU3RhbmRpbmdzRGF0YS5zb3J0KChhLCBiKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLlRvdGFsUmVzdWx0LkNvdW50ID09PSAwICYmIGIuVG90YWxSZXN1bHQuQ291bnQgPT09IDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEuVG90YWxSZXN1bHQuQ291bnQgPT09IDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGIuVG90YWxSZXN1bHQuQ291bnQgPT09IDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLlJhbmsgIT09IGIuUmFuaykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLlJhbmsgLSBiLlJhbms7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiLk9sZFJhdGluZyAhPT0gYS5PbGRSYXRpbmcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5PbGRSYXRpbmcgLSBhLk9sZFJhdGluZzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEuVXNlcklzRGVsZXRlZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGIuVXNlcklzRGVsZXRlZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdFBlcmZvcm1hbmNlID0gdGhpcy5jb250ZXN0LnBlcmZMaW1pdDsKICAgICAgICAgICAgICAgICAgICBsZXQgZGVsZXRlZENvdW50ID0gMDsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdHMgPSBuZXcgRml4ZWRSZXN1bHRzKHNvcnRlZFN0YW5kaW5nc0RhdGEubWFwKChkYXRhLCBpbmRleCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gcmF3UmVzdWx0W2luZGV4IC0gZGVsZXRlZENvdW50XTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQgfHwgZGF0YS5PbGRSYXRpbmcgIT09IHJlc3VsdC5PbGRSYXRpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZWRDb3VudCsrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlc3VsdChyZXN1bHQgPyByZXN1bHQuSXNSYXRlZCA6IGZhbHNlLCAhY29udGVzdEluZm9ybWF0aW9uLmlzSGV1cmlzdGljIHx8IGRhdGEuVG90YWxSZXN1bHQuQ291bnQgIT09IDAsIGRhdGEuVXNlclNjcmVlbk5hbWUsIGRhdGEuUmFuaywgLTEsIGRhdGEuT2xkUmF0aW5nLCByZXN1bHQgPyByZXN1bHQuTmV3UmF0aW5nIDogMCwgMCwgcmVzdWx0ICYmIHJlc3VsdC5Jc1JhdGVkID8gKGxhc3RQZXJmb3JtYW5jZSA9IHJlc3VsdC5QZXJmb3JtYW5jZSkgOiBsYXN0UGVyZm9ybWFuY2UsIHJlc3VsdCA/IHJlc3VsdC5Jbm5lclBlcmZvcm1hbmNlIDogMCk7CiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzID0gbmV3IE9uRGVtYW5kUmVzdWx0cyh0aGlzLmNvbnRlc3QsIHRoaXMuY29udGVzdC50ZW1wbGF0ZVJlc3VsdHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKCFzaG91bGRFbmFibGVkUHJlZGljdG9yKCkudmVyZGljdCkgewogICAgICAgICAgICAgICAgbW9kZWwudXBkYXRlSW5mb3JtYXRpb24oc2hvdWxkRW5hYmxlZFByZWRpY3RvcigpLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgdXBkYXRlVmlldygpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBsZXQgYVBlcmZzOwogICAgICAgICAgICAgICAgbGV0IHN0YW5kaW5nczsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgc3RhbmRpbmdzID0geWllbGQgZ2V0U3RhbmRpbmdzRGF0YUFzeW5jKGNvbnRlc3RTY3JlZW5OYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCLpoIbkvY3ooajjga7lj5blvpfjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIIiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgYVBlcmZzID0geWllbGQgZ2V0QVBlcmZzRGF0YUFzeW5jKGNvbnRlc3RTY3JlZW5OYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJBUGVyZuOBruWPluW+l+OBq+WkseaVl+OBl+OBvuOBl+OBn+OAgiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgeWllbGQgdXBkYXRlRGF0YShhUGVyZnMsIHN0YW5kaW5ncyk7CiAgICAgICAgICAgICAgICBtb2RlbC5zZXRFbmFibGUodHJ1ZSk7CiAgICAgICAgICAgICAgICBtb2RlbC51cGRhdGVJbmZvcm1hdGlvbihg5pyA57WC5pu05pawIDogJHtuZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpLnNwbGl0KCIgIilbMF19YCk7CiAgICAgICAgICAgICAgICBpZiAoaXNTdGFuZGluZ3NQYWdlKSB7CiAgICAgICAgICAgICAgICAgICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVVwZGF0ZXIudXBkYXRlKHRhYmxlRWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgfSkub2JzZXJ2ZSh0YWJsZUVsZW1lbnQudEJvZGllc1swXSwgewogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmcmVzaEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicmVmcmVzaCIpOwogICAgICAgICAgICAgICAgICAgIGlmIChyZWZyZXNoRWxlbSkKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9uUmVjb3JkKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXNhYmxlZCA9IG11dGF0aW9uUmVjb3JkWzBdLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoImRpc2FibGVkIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkICgoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHVwZGF0ZVN0YW5kaW5nc0Zyb21BUEkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmlldygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KS5vYnNlcnZlKHJlZnJlc2hFbGVtLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbImNsYXNzIl0sCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBtb2RlbC51cGRhdGVJbmZvcm1hdGlvbihlLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgbW9kZWwuc2V0RW5hYmxlKGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB1cGRhdGVWaWV3KCk7CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlbG9hZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcmVkaWN0b3ItcmVsb2FkIik7CiAgICAgICAgICAgICAgICByZWxvYWRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgdm9pZCAoKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC51cGRhdGVJbmZvcm1hdGlvbigi6Kqt44G/6L6844G/5Lit4oCmIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9hZEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXcoKTsKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgdXBkYXRlU3RhbmRpbmdzRnJvbUFQSSgpOwogICAgICAgICAgICAgICAgICAgICAgICByZWxvYWRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmlldygpOwogICAgICAgICAgICAgICAgICAgIH0pKSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicHJlZGljdG9yLWN1cnJlbnQiKS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBteVJlc3VsdCA9IHRoaXMuY29udGVzdC50ZW1wbGF0ZVJlc3VsdHNbdXNlclNjcmVlbk5hbWVdOwogICAgICAgICAgICAgICAgICAgIGlmICghbXlSZXN1bHQpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBDYWxjRnJvbVJhbmtNb2RlbChtb2RlbCk7CiAgICAgICAgICAgICAgICAgICAgbW9kZWwudXBkYXRlRGF0YShteVJlc3VsdC5SYXRlZFJhbmssIG1vZGVsLnBlcmZWYWx1ZSwgbW9kZWwucmF0ZVZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB1cGRhdGVWaWV3KCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcmVkaWN0b3ItaW5wdXQtcmFuayIpLmFkZEV2ZW50TGlzdGVuZXIoImtleXVwIiwgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0U3RyaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInByZWRpY3Rvci1pbnB1dC1yYW5rIikudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXROdW1iZXIgPSBwYXJzZUludChpbnB1dFN0cmluZyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShpbnB1dE51bWJlcikpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBDYWxjRnJvbVJhbmtNb2RlbChtb2RlbCk7CiAgICAgICAgICAgICAgICAgICAgbW9kZWwudXBkYXRlRGF0YShpbnB1dE51bWJlciwgMCwgMCk7CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmlldygpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicHJlZGljdG9yLWlucHV0LXBlcmYiKS5hZGRFdmVudExpc3RlbmVyKCJrZXl1cCIsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dFN0cmluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcmVkaWN0b3ItaW5wdXQtcGVyZiIpLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0TnVtYmVyID0gcGFyc2VJbnQoaW5wdXRTdHJpbmcpOwogICAgICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoaW5wdXROdW1iZXIpKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgQ2FsY0Zyb21QZXJmTW9kZWwobW9kZWwpOwogICAgICAgICAgICAgICAgICAgIG1vZGVsLnVwZGF0ZURhdGEoMCwgaW5wdXROdW1iZXIsIDApOwogICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXcoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInByZWRpY3Rvci1pbnB1dC1yYXRlIikuYWRkRXZlbnRMaXN0ZW5lcigia2V5dXAiLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRTdHJpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicHJlZGljdG9yLWlucHV0LXJhdGUiKS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dE51bWJlciA9IHBhcnNlSW50KGlucHV0U3RyaW5nKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGlucHV0TnVtYmVyKSkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIG1vZGVsID0gbmV3IENhbGNGcm9tUmF0ZU1vZGVsKG1vZGVsKTsKICAgICAgICAgICAgICAgICAgICBtb2RlbC51cGRhdGVEYXRhKDAsIDAsIGlucHV0TnVtYmVyKTsKICAgICAgICAgICAgICAgICAgICB1cGRhdGVWaWV3KCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVTdGFuZGluZ3NGcm9tQVBJKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRFbmFibGVkID0gc2hvdWxkRW5hYmxlZFByZWRpY3RvcigpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3VsZEVuYWJsZWQudmVyZGljdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwudXBkYXRlSW5mb3JtYXRpb24oc2hvdWxkRW5hYmxlZC5tZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnNldEVuYWJsZShmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhbmRpbmdzID0geWllbGQgZ2V0U3RhbmRpbmdzRGF0YUFzeW5jKGNvbnRlc3RTY3JlZW5OYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXBlcmZzID0geWllbGQgZ2V0QVBlcmZzRGF0YUFzeW5jKGNvbnRlc3RTY3JlZW5OYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgdXBkYXRlRGF0YShhcGVyZnMsIHN0YW5kaW5ncyk7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnVwZGF0ZUluZm9ybWF0aW9uKGDmnIDntYLmm7TmlrAgOiAke25ldyBEYXRlKCkudG9UaW1lU3RyaW5nKCkuc3BsaXQoIiAiKVswXX1gKTsKICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0RW5hYmxlKHRydWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC51cGRhdGVJbmZvcm1hdGlvbihlLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zZXRFbmFibGUoZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3VsZEVuYWJsZWRQcmVkaWN0b3IoKSB7CiAgICAgICAgICAgICAgICBpZiAobmV3IERhdGUoKSA8IHN0YXJ0VGltZSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2ZXJkaWN0OiBmYWxzZSwgbWVzc2FnZTogIuOCs+ODs+ODhuOCueODiOOBr+Wni+OBvuOBo+OBpuOBhOOBvuOBm+OCkyIgfTsKICAgICAgICAgICAgICAgIGlmIChzdGFydFRpbWUgPCBmaXJzdENvbnRlc3REYXRlKQogICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmRpY3Q6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAi54++6KGM44Os44O844OI44K344K544OG44Og5Lul5YmN44Gu44Kz44Oz44OG44K544OI44Gn44GZIiwKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYgKGNvbnRlc3RJbmZvcm1hdGlvbi5SYXRlZFJhbmdlWzBdID4gY29udGVzdEluZm9ybWF0aW9uLlJhdGVkUmFuZ2VbMV0pCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmVyZGljdDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICJyYXRlZOOBquOCs+ODs+ODhuOCueODiOOBp+OBr+OBguOCiuOBvuOBm+OCkyIsCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiB7IHZlcmRpY3Q6IHRydWUsIG1lc3NhZ2U6ICIiIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVmlldygpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHJvdW5kZWRSYW5rVmFsdWUgPSBpc0Zpbml0ZShtb2RlbC5yYW5rVmFsdWUpID8gcm91bmRWYWx1ZShtb2RlbC5yYW5rVmFsdWUsIDIpLnRvU3RyaW5nKCkgOiAiIjsKICAgICAgICAgICAgICAgIGNvbnN0IHJvdW5kZWRQZXJmVmFsdWUgPSBpc0Zpbml0ZShtb2RlbC5wZXJmVmFsdWUpID8gcm91bmRWYWx1ZShtb2RlbC5wZXJmVmFsdWUsIDIpLnRvU3RyaW5nKCkgOiAiIjsKICAgICAgICAgICAgICAgIGNvbnN0IHJvdW5kZWRSYXRlVmFsdWUgPSBpc0Zpbml0ZShtb2RlbC5yYXRlVmFsdWUpID8gcm91bmRWYWx1ZShtb2RlbC5yYXRlVmFsdWUsIDIpLnRvU3RyaW5nKCkgOiAiIjsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcmVkaWN0b3ItaW5wdXQtcmFuayIpLnZhbHVlID0gcm91bmRlZFJhbmtWYWx1ZTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcmVkaWN0b3ItaW5wdXQtcGVyZiIpLnZhbHVlID0gcm91bmRlZFBlcmZWYWx1ZTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcmVkaWN0b3ItaW5wdXQtcmF0ZSIpLnZhbHVlID0gcm91bmRlZFJhdGVWYWx1ZTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcmVkaWN0b3ItYWxlcnQiKS5pbm5lckhUTUwgPSBgPGg1IGNsYXNzPSdzaWRlbWVudS10eHQnPiR7bW9kZWwuaW5mb3JtYXRpb259PC9oNT5gOwogICAgICAgICAgICAgICAgaWYgKG1vZGVsLmVuYWJsZWQpCiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZCgpOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGRpc2FibGVkKCk7CiAgICAgICAgICAgICAgICBpZiAoaXNTdGFuZGluZ3NQYWdlICYmIHNob3VsZEVuYWJsZWRQcmVkaWN0b3IoKS52ZXJkaWN0KSB7CiAgICAgICAgICAgICAgICAgICAgdGFibGVVcGRhdGVyLnVwZGF0ZSh0YWJsZUVsZW1lbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZnVuY3Rpb24gZW5hYmxlZCgpIHsKICAgICAgICAgICAgICAgICAgICBwcmVkaWN0b3JFbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnQpLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkaXNhYmxlZCgpIHsKICAgICAgICAgICAgICAgICAgICBwcmVkaWN0b3JFbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnQpLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIGFmdGVyT3BlbigpIHsKICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgewogICAgICAgICAgICBnZXRQZXJmb3JtYW5jZUhpc3Rvcmllcyh5aWVsZCBnZXRIaXN0b3J5RGF0YUFzeW5jKHVzZXJTY3JlZW5OYW1lKSkuZm9yRWFjaCgoZWxlbSkgPT4gdGhpcy5oaXN0b3J5RGF0YS5wdXNoKGVsZW0pKTsKICAgICAgICB9KTsKICAgIH0KfQpjb25zdCBwcmVkaWN0b3IgPSBuZXcgUHJlZGljdG9yRWxlbWVudCgpOwoKdmFyIGRvbSQxID0gIjxkaXYgaWQ9XCJlc3RpbWF0b3ItYWxlcnRcIj48L2Rpdj5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cblx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG5cdFx0PHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiIGlkPVwiZXN0aW1hdG9yLWlucHV0LWRlc2NcIj48L3NwYW4+XG5cdFx0PGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwiZXN0aW1hdG9yLWlucHV0XCI+XG5cdDwvZGl2PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwicm93XCI+XG5cdDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuXHRcdDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIiBpZD1cImVzdGltYXRvci1yZXMtZGVzY1wiPjwvc3Bhbj5cblx0XHQ8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImVzdGltYXRvci1yZXNcIiBkaXNhYmxlZD1cImRpc2FibGVkXCI+XG5cdFx0PHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1idG5cIj5cblx0XHRcdDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBpZD1cImVzdGltYXRvci10b2dnbGVcIj7lhaXmm788L2J1dHRvbj5cblx0XHQ8L3NwYW4+XG5cdDwvZGl2PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwicm93XCIgc3R5bGU9XCJtYXJnaW46IDEwcHggMHB4O1wiPlxuXHQ8YSBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBjb2wteHMtb2Zmc2V0LTggY29sLXhzLTRcIiByZWw9XCJub2ZvbGxvd1wiIG9uY2xpY2s9XCJ3aW5kb3cub3BlbihlbmNvZGVVUkkoZGVjb2RlVVJJKHRoaXMuaHJlZikpLCd0d3dpbmRvdycsJ3dpZHRoPTU1MCwgaGVpZ2h0PTQ1MCwgcGVyc29uYWxiYXI9MCwgdG9vbGJhcj0wLCBzY3JvbGxiYXJzPTEnKTsgcmV0dXJuIGZhbHNlO1wiIGlkPVwiZXN0aW1hdG9yLXR3ZWV0XCI+44OE44Kk44O844OIPC9hPlxuPC9kaXY+IjsKCmNsYXNzIEVzdGltYXRvck1vZGVsIHsKICAgIGNvbnN0cnVjdG9yKGlucHV0VmFsdWUsIHBlcmZIaXN0b3J5KSB7CiAgICAgICAgdGhpcy5pbnB1dERlc2MgPSAiIjsKICAgICAgICB0aGlzLnJlc3VsdERlc2MgPSAiIjsKICAgICAgICB0aGlzLnBlcmZIaXN0b3J5ID0gcGVyZkhpc3Rvcnk7CiAgICAgICAgdGhpcy51cGRhdGVJbnB1dChpbnB1dFZhbHVlKTsKICAgIH0KICAgIHVwZGF0ZUlucHV0KHZhbHVlKSB7CiAgICAgICAgdGhpcy5pbnB1dFZhbHVlID0gdmFsdWU7CiAgICAgICAgdGhpcy5yZXN1bHRWYWx1ZSA9IHRoaXMuY2FsY1Jlc3VsdCh2YWx1ZSk7CiAgICB9CiAgICB0b2dnbGUoKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBjYWxjUmVzdWx0KGlucHV0KSB7CiAgICAgICAgcmV0dXJuIGlucHV0OwogICAgfQp9CgpjbGFzcyBDYWxjUmF0aW5nTW9kZWwgZXh0ZW5kcyBFc3RpbWF0b3JNb2RlbCB7CiAgICBjb25zdHJ1Y3RvcihpbnB1dFZhbHVlLCBwZXJmSGlzdG9yeSkgewogICAgICAgIHN1cGVyKGlucHV0VmFsdWUsIHBlcmZIaXN0b3J5KTsKICAgICAgICB0aGlzLmlucHV0RGVzYyA9ICLjg5Hjg5Xjgqnjg7zjg57jg7PjgrkiOwogICAgICAgIHRoaXMucmVzdWx0RGVzYyA9ICLliLDpgZTjg6zjg7zjg4bjgqPjg7PjgrAiOwogICAgfQogICAgdG9nZ2xlKCkgewogICAgICAgIHJldHVybiBuZXcgQ2FsY1BlcmZNb2RlbCh0aGlzLnJlc3VsdFZhbHVlLCB0aGlzLnBlcmZIaXN0b3J5KTsKICAgIH0KICAgIGNhbGNSZXN1bHQoaW5wdXQpIHsKICAgICAgICByZXR1cm4gcG9zaXRpdml6ZVJhdGluZyhjYWxjUmF0aW5nRnJvbUhpc3RvcnkodGhpcy5wZXJmSGlzdG9yeS5jb25jYXQoW2lucHV0XSkpKTsKICAgIH0KfQoKY2xhc3MgQ2FsY1BlcmZNb2RlbCBleHRlbmRzIEVzdGltYXRvck1vZGVsIHsKICAgIGNvbnN0cnVjdG9yKGlucHV0VmFsdWUsIHBlcmZIaXN0b3J5KSB7CiAgICAgICAgc3VwZXIoaW5wdXRWYWx1ZSwgcGVyZkhpc3RvcnkpOwogICAgICAgIHRoaXMuaW5wdXREZXNjID0gIuebruaomeODrOODvOODhuOCo+ODs+OCsCI7CiAgICAgICAgdGhpcy5yZXN1bHREZXNjID0gIuW/heimgeODkeODleOCqeODvOODnuODs+OCuSI7CiAgICB9CiAgICB0b2dnbGUoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBDYWxjUmF0aW5nTW9kZWwodGhpcy5yZXN1bHRWYWx1ZSwgdGhpcy5wZXJmSGlzdG9yeSk7CiAgICB9CiAgICBjYWxjUmVzdWx0KGlucHV0KSB7CiAgICAgICAgcmV0dXJuIGNhbGNSZXF1aXJlZFBlcmZvcm1hbmNlKHVucG9zaXRpdml6ZVJhdGluZyhpbnB1dCksIHRoaXMucGVyZkhpc3RvcnkpOwogICAgfQp9CgpmdW5jdGlvbiBHZXRFbWJlZFR3ZWV0TGluayhjb250ZW50LCB1cmwpIHsKICAgIHJldHVybiBgaHR0cHM6Ly90d2l0dGVyLmNvbS9zaGFyZT90ZXh0PSR7ZW5jb2RlVVJJKGNvbnRlbnQpfSZ1cmw9JHtlbmNvZGVVUkkodXJsKX1gOwp9CgpmdW5jdGlvbiBnZXRMUyhrZXkpIHsKICAgIGNvbnN0IHZhbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7CiAgICByZXR1cm4gKHZhbCA/IEpTT04ucGFyc2UodmFsKSA6IHZhbCk7Cn0KZnVuY3Rpb24gc2V0TFMoa2V5LCB2YWwpIHsKICAgIHRyeSB7CiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWwpKTsKICAgIH0KICAgIGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgIH0KfQpjb25zdCBtb2RlbHMgPSBbQ2FsY1BlcmZNb2RlbCwgQ2FsY1JhdGluZ01vZGVsXTsKZnVuY3Rpb24gR2V0TW9kZWxGcm9tU3RhdGVDb2RlKHN0YXRlLCB2YWx1ZSwgaGlzdG9yeSkgewogICAgbGV0IG1vZGVsID0gbW9kZWxzLmZpbmQoKG1vZGVsKSA9PiBtb2RlbC5uYW1lID09PSBzdGF0ZSk7CiAgICBpZiAoIW1vZGVsKQogICAgICAgIG1vZGVsID0gQ2FsY1BlcmZNb2RlbDsKICAgIHJldHVybiBuZXcgbW9kZWwodmFsdWUsIGhpc3RvcnkpOwp9CmNsYXNzIEVzdGltYXRvckVsZW1lbnQgZXh0ZW5kcyBTaWRlTWVudUVsZW1lbnQgewogICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTsKICAgICAgICB0aGlzLmlkID0gImVzdGltYXRvciI7CiAgICAgICAgdGhpcy50aXRsZSA9ICJFc3RpbWF0b3IiOwogICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb20kMTsKICAgICAgICB0aGlzLm1hdGNoID0gL2F0Y29kZXIuanAvOwogICAgfQogICAgYWZ0ZXJBcHBlbmQoKSB7CiAgICAgICAgLy9ub3RoaW5nIHRvIGRvCiAgICB9CiAgICAvLyBub3RoaW5nIHRvIGRvCiAgICBhZnRlck9wZW4oKSB7CiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsKICAgICAgICAgICAgY29uc3QgZXN0aW1hdG9ySW5wdXRTZWxlY3RvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlc3RpbWF0b3ItaW5wdXQiKTsKICAgICAgICAgICAgY29uc3QgZXN0aW1hdG9yUmVzdWx0U2VsZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXN0aW1hdG9yLXJlcyIpOwogICAgICAgICAgICBsZXQgbW9kZWwgPSBHZXRNb2RlbEZyb21TdGF0ZUNvZGUoZ2V0TFMoInNpZGVtZW51X2VzdGltYXRvcl9zdGF0ZSIpLCBnZXRMUygic2lkZW1lbnVfZXN0aW1hdG9yX3ZhbHVlIiksIGdldFBlcmZvcm1hbmNlSGlzdG9yaWVzKHlpZWxkIGdldEhpc3RvcnlEYXRhQXN5bmModXNlclNjcmVlbk5hbWUpKSk7CiAgICAgICAgICAgIHVwZGF0ZVZpZXcoKTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVzdGltYXRvci10b2dnbGUiKS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHsKICAgICAgICAgICAgICAgIG1vZGVsID0gbW9kZWwudG9nZ2xlKCk7CiAgICAgICAgICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2UoKTsKICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXcoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGVzdGltYXRvcklucHV0U2VsZWN0b3IuYWRkRXZlbnRMaXN0ZW5lcigia2V5dXAiLCAoKSA9PiB7CiAgICAgICAgICAgICAgICB1cGRhdGVNb2RlbCgpOwogICAgICAgICAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlKCk7CiAgICAgICAgICAgICAgICB1cGRhdGVWaWV3KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvKiogbW9kZWzjgpJpbnB1dOOBruWApOOBq+W/nOOBmOOBpuabtOaWsCAqLwogICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVNb2RlbCgpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0TnVtYmVyID0gZXN0aW1hdG9ySW5wdXRTZWxlY3Rvci52YWx1ZUFzTnVtYmVyOwogICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShpbnB1dE51bWJlcikpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgbW9kZWwudXBkYXRlSW5wdXQoaW5wdXROdW1iZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qKiBtb2RlbOOBrueKtuaFi+OCkkxT44Gr5L+d5a2YICovCiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsU3RvcmFnZSgpIHsKICAgICAgICAgICAgICAgIHNldExTKCJzaWRlbWVudV9lc3RpbWF0b3JfdmFsdWUiLCBtb2RlbC5pbnB1dFZhbHVlKTsKICAgICAgICAgICAgICAgIHNldExTKCJzaWRlbWVudV9lc3RpbWF0b3Jfc3RhdGUiLCBtb2RlbC5jb25zdHJ1Y3Rvci5uYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvKiogbW9kZWzjgpLlhYPjgat2aWV344KS5pu05pawICovCiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVZpZXcoKSB7CiAgICAgICAgICAgICAgICBjb25zdCByb3VuZGVkSW5wdXQgPSByb3VuZFZhbHVlKG1vZGVsLmlucHV0VmFsdWUsIDIpOwogICAgICAgICAgICAgICAgY29uc3Qgcm91bmRlZFJlc3VsdCA9IHJvdW5kVmFsdWUobW9kZWwucmVzdWx0VmFsdWUsIDIpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVzdGltYXRvci1pbnB1dC1kZXNjIikuaW5uZXJUZXh0ID0gbW9kZWwuaW5wdXREZXNjOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImVzdGltYXRvci1yZXMtZGVzYyIpLmlubmVyVGV4dCA9IG1vZGVsLnJlc3VsdERlc2M7CiAgICAgICAgICAgICAgICBlc3RpbWF0b3JJbnB1dFNlbGVjdG9yLnZhbHVlID0gU3RyaW5nKHJvdW5kZWRJbnB1dCk7CiAgICAgICAgICAgICAgICBlc3RpbWF0b3JSZXN1bHRTZWxlY3Rvci52YWx1ZSA9IFN0cmluZyhyb3VuZGVkUmVzdWx0KTsKICAgICAgICAgICAgICAgIGNvbnN0IHR3ZWV0U3RyID0gYEF0Q29kZXLjga7jg4/jg7Pjg4njg6vjg43jg7zjg6A6ICR7dXNlclNjcmVlbk5hbWV9XG4ke21vZGVsLmlucHV0RGVzY306ICR7cm91bmRlZElucHV0fVxuJHttb2RlbC5yZXN1bHREZXNjfTogJHtyb3VuZGVkUmVzdWx0fVxuYDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlc3RpbWF0b3ItdHdlZXQiKS5ocmVmID0gR2V0RW1iZWRUd2VldExpbmsodHdlZXRTdHIsICJodHRwczovL2dyZWFzeWZvcmsub3JnL2phL3NjcmlwdHMvMzY5OTU0LWFjLXByZWRpY3RvciIpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9Cn0KY29uc3QgZXN0aW1hdG9yID0gbmV3IEVzdGltYXRvckVsZW1lbnQoKTsKCnZhciBzaWRlbWVudUh0bWwgPSAiPHN0eWxlPlxuICAgICNtZW51LXdyYXAge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHotaW5kZXg6IDIwO1xuICAgICAgICB3aWR0aDogNDAwcHg7XG4gICAgICAgIHJpZ2h0OiAtMzUwcHg7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAxNTBtcyAwbXMgZWFzZTtcbiAgICAgICAgbWFyZ2luLXRvcDogNTBweDtcbiAgICB9XG5cbiAgICAjc2lkZW1lbnUge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMDAwO1xuICAgICAgICBvcGFjaXR5OiAwLjg1O1xuICAgIH1cbiAgICAjc2lkZW1lbnUta2V5IHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4IDBweCAwcHggNXB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAjMDAwO1xuICAgICAgICBvcGFjaXR5OiAwLjg1O1xuICAgICAgICBjb2xvcjogI0ZGRjtcbiAgICAgICAgcGFkZGluZzogMzBweCAwO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuXG4gICAgI3NpZGVtZW51IHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICB3aWR0aDogMzUwcHg7XG4gICAgICAgIGZsb2F0OiByaWdodDtcbiAgICB9XG5cbiAgICAjc2lkZW1lbnUta2V5IHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICB3aWR0aDogNTBweDtcbiAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgIH1cblxuICAgIC5zaWRlbWVudS1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTM1MHB4KTtcbiAgICB9XG5cbiAgICAuc2lkZW1lbnUtdHh0IHtcbiAgICAgICAgY29sb3I6ICNEREQ7XG4gICAgfVxuXG4gICAgLm1lbnUtd3JhcHBlciB7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjRkZGO1xuICAgIH1cblxuICAgIC5tZW51LWhlYWRlciB7XG4gICAgICAgIG1hcmdpbjogMTBweCAyMHB4IDEwcHggMjBweDtcbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgfVxuXG4gICAgLm1lbnUtYm94IHtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDMwMG1zIDBzIGVhc2U7XG4gICAgfVxuICAgIC5tZW51LWJveC1jb2xsYXBzZSB7XG4gICAgICAgIGhlaWdodDogMHB4ICFpbXBvcnRhbnQ7XG4gICAgfVxuICAgIC5tZW51LWJveC1jb2xsYXBzZSAubWVudS1jb250ZW50IHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcbiAgICB9XG4gICAgLm1lbnUtY29udGVudCB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMjBweCAxMHB4IDIwcHg7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAzMDBtcyAwcyBlYXNlO1xuICAgIH1cbiAgICAuY252dGItZml4ZWQge1xuICAgICAgICB6LWluZGV4OiAxOTtcbiAgICB9XG48L3N0eWxlPlxuPGRpdiBpZD1cIm1lbnUtd3JhcFwiPlxuICAgIDxkaXYgaWQ9XCJzaWRlbWVudVwiIGNsYXNzPVwiY29udGFpbmVyXCI+PC9kaXY+XG4gICAgPGRpdiBpZD1cInNpZGVtZW51LWtleVwiIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1tZW51LWxlZnRcIj48L2Rpdj5cbjwvZGl2PiI7CgovL2ltcG9ydCAiLi9zaWRlbWVudS5zY3NzIjsKY2xhc3MgU2lkZU1lbnUgewogICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTsKICAgICAgICB0aGlzLkdlbmVyYXRlKCk7CiAgICB9CiAgICBHZW5lcmF0ZSgpIHsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFpbi1kaXYiKS5pbnNlcnRBZGphY2VudEhUTUwoImFmdGVyYmVnaW4iLCBzaWRlbWVudUh0bWwpOwogICAgICAgIHJlc2l6ZVNpZGVtZW51SGVpZ2h0KCk7CiAgICAgICAgY29uc3Qga2V5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNpZGVtZW51LWtleSIpOwogICAgICAgIGNvbnN0IHdyYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWVudS13cmFwIik7CiAgICAgICAga2V5LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4gewogICAgICAgICAgICB0aGlzLnBlbmRpbmdFbGVtZW50cy5mb3JFYWNoKChlbGVtKSA9PiB7CiAgICAgICAgICAgICAgICBlbGVtLmFmdGVyT3BlbigpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy5wZW5kaW5nRWxlbWVudHMubGVuZ3RoID0gMDsKICAgICAgICAgICAga2V5LmNsYXNzTGlzdC50b2dnbGUoImdseXBoaWNvbi1tZW51LWxlZnQiKTsKICAgICAgICAgICAga2V5LmNsYXNzTGlzdC50b2dnbGUoImdseXBoaWNvbi1tZW51LXJpZ2h0Iik7CiAgICAgICAgICAgIHdyYXAuY2xhc3NMaXN0LnRvZ2dsZSgic2lkZW1lbnUtYWN0aXZlIik7CiAgICAgICAgfSk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm9ucmVzaXplIiwgcmVzaXplU2lkZW1lbnVIZWlnaHQpOwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzaWRlbWVudSIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKGV2ZW50KSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDsKICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gdGFyZ2V0LmNsb3Nlc3QoIi5tZW51LWhlYWRlciIpOwogICAgICAgICAgICBpZiAoIWhlYWRlcikKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgY29uc3QgYm94ID0gdGFyZ2V0LmNsb3Nlc3QoIi5tZW51LXdyYXBwZXIiKS5xdWVyeVNlbGVjdG9yKCIubWVudS1ib3giKTsKICAgICAgICAgICAgYm94LmNsYXNzTGlzdC50b2dnbGUoIm1lbnUtYm94LWNvbGxhcHNlIik7CiAgICAgICAgICAgIGNvbnN0IGFycm93ID0gdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoIi5nbHlwaGljb24iKTsKICAgICAgICAgICAgYXJyb3cuY2xhc3NMaXN0LnRvZ2dsZSgiZ2x5cGhpY29uLW1lbnUtZG93biIpOwogICAgICAgICAgICBhcnJvdy5jbGFzc0xpc3QudG9nZ2xlKCJnbHlwaGljb24tbWVudS11cCIpOwogICAgICAgIH0pOwogICAgICAgIGZ1bmN0aW9uIHJlc2l6ZVNpZGVtZW51SGVpZ2h0KCkgewogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2lkZW1lbnUiKS5zdHlsZS5oZWlnaHQgPSBgJHt3aW5kb3cuaW5uZXJIZWlnaHR9cHhgOwogICAgICAgIH0KICAgIH0KICAgIGFkZEVsZW1lbnQoZWxlbWVudCkgewogICAgICAgIGlmICghZWxlbWVudC5zaG91bGREaXNwbGF5ZWQoZG9jdW1lbnQubG9jYXRpb24uaHJlZikpCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICBjb25zdCBzaWRlbWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzaWRlbWVudSIpOwogICAgICAgIHNpZGVtZW51Lmluc2VydEFkamFjZW50SFRNTCgiYWZ0ZXJiZWdpbiIsIGVsZW1lbnQuR2V0SFRNTCgpKTsKICAgICAgICBjb25zdCBjb250ZW50ID0gc2lkZW1lbnUucXVlcnlTZWxlY3RvcigiLm1lbnUtY29udGVudCIpOwogICAgICAgIGNvbnRlbnQucGFyZW50RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtjb250ZW50Lm9mZnNldEhlaWdodH1weGA7CiAgICAgICAgZWxlbWVudC5hZnRlckFwcGVuZCgpOwogICAgICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzLnB1c2goZWxlbWVudCk7CiAgICB9Cn0KCmNvbnN0IHNpZGVtZW51ID0gbmV3IFNpZGVNZW51KCk7CmNvbnN0IGVsZW1lbnRzID0gW3ByZWRpY3RvciwgZXN0aW1hdG9yXTsKZm9yIChsZXQgaSA9IGVsZW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICBzaWRlbWVudS5hZGRFbGVtZW50KGVsZW1lbnRzW2ldKTsKfQo="},{"name":"CF-Predictor","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["cf-predictor-frontend.herokuapp.com","cf-predictor.herokuapp.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://codeforces.com/contest/*/standings*","*://codeforc.es/contest/*/standings*","*://codeforces.ml/contest/*/standings*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1654279239176,"data":{}},"enabled":false,"position":3,"file_url":"https://greasyfork.org/scripts/38050/code/script.user.js","uuid":"e81adaea-4f26-4a7d-8e24-423fcc430ccd","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDRi1QcmVkaWN0b3IKLy8gQHZlcnNpb24gICAgICAxLjMuMQovLyBAZGVzY3JpcHRpb24gIFRoaXMgZXh0ZW5zaW9uIHByZWRpY3RzIHJhdGluZyBjaGFuZ2VzIGZvciBDb2RlZm9yY2VzLiBJdCBzaG93cyBhcHByb3hpbWF0ZSBkZWx0YXMgZHVyaW5nIGFuZCBhZnRlciB0aGUgY29udGVzdC4KLy8gQGF1dGhvciAgICAgICBPcmlnaW5hbGx5IGJ5IFdzbEYsIEVkaXRlZCBieSBaWllTb25ueQovLyBAbWF0Y2ggICAgICAgICo6Ly9jb2RlZm9yY2VzLmNvbS9jb250ZXN0Lyovc3RhbmRpbmdzKgovLyBAbWF0Y2ggICAgICAgICo6Ly9jb2RlZm9yYy5lcy9jb250ZXN0Lyovc3RhbmRpbmdzKgovLyBAbWF0Y2ggICAgICAgICo6Ly9jb2RlZm9yY2VzLm1sL2NvbnRlc3QvKi9zdGFuZGluZ3MqCi8vIEBjb25uZWN0ICAgICAgY2YtcHJlZGljdG9yLWZyb250ZW5kLmhlcm9rdWFwcC5jb20KLy8gQGNvbm5lY3QgICAgICBjZi1wcmVkaWN0b3IuaGVyb2t1YXBwLmNvbQovLyBAZ3JhbnQgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy91c2Vycy8xNjkwMDcKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgcGFydHlOdW0gPSAwOwogICAgdmFyIHJlc3VsdHMgPSBbXTsKCXNob3dEZWx0YXMoKTsKCiAgICBmdW5jdGlvbiBtb2RpZnlQYXJ0eUh0bWwoaW5kZXgsIGVsZW0pIHsKICAgICAgICB2YXIgZGVsdGEgPSAnPyc7CiAgICAgICAgdmFyIHJhbmsgPSAnICc7CiAgICAgICAgdmFyIHNlZWQgPSAnICc7CgogICAgICAgIGlmIChwYXJ0eU51bSA+IDApIHsKICAgICAgICAgICAgdmFyIGhhbmRsZSA9ICQoZWxlbSkuZmluZCgidGQ6ZXEoMSkiKS5maW5kKCJhIikubGFzdCgpLmh0bWwoKTsKICAgICAgICAgICAgaWYgKGhhbmRsZSkgewogICAgICAgICAgICAgICAgLy9uZXh0IDIgbGluZXMgLSBmaXggZm9yIGxlZ2VuZGFyeSBncmFuZG1hc3RlcgogICAgICAgICAgICAgICAgaGFuZGxlID0gaGFuZGxlLnJlcGxhY2UoJzxzcGFuIGNsYXNzPSJsZWdlbmRhcnktdXNlci1maXJzdC1sZXR0ZXIiPicsJycpOwogICAgICAgICAgICAgICAgaGFuZGxlID0gaGFuZGxlLnJlcGxhY2UoJzwvc3Bhbj4nLCcnKTsKICAgICAgICAgICAgICAgIGlmIChoYW5kbGUgaW4gcmVzdWx0cykgewogICAgICAgICAgICAgICAgICAgIGRlbHRhID0gcmVzdWx0c1toYW5kbGVdLmRlbHRhOwogICAgICAgICAgICAgICAgICAgIHJhbmsgPSByZXN1bHRzW2hhbmRsZV0ucmFuazsKICAgICAgICAgICAgICAgICAgICBzZWVkID0gcmVzdWx0c1toYW5kbGVdLnNlZWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBkYXJrQ2xhc3MgPSAiIjsKICAgICAgICBpZiAocGFydHlOdW0gJSAyID09IDEpIHsKICAgICAgICAgICAgZGFya0NsYXNzID0gImRhcmsgIjsKICAgICAgICB9CiAgICAgICAgdmFyIHRleHQ7CiAgICAgICAgaWYgKHBhcnR5TnVtID09IDApIHsKICAgICAgICAgICAgdGV4dCA9ICI8dGggY2xhc3M9J3RvcCByaWdodCcgc3R5bGU9J3dpZHRoOiA0ZW07Jz48c3BhbiB0aXRsZT0nUmF0aW5nIGNoYW5nZScnPiZEZWx0YTs8L3NwYW4+PC90aD4iOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChkZWx0YSA+IDApIHsKICAgICAgICAgICAgICAgIHRleHQgPSAiPHRkIGNsYXNzPSciICsgZGFya0NsYXNzICsgInJpZ2h0Jz48c3BhbiBzdHlsZT0nY29sb3I6Z3JlZW47Zm9udC13ZWlnaHQ6Ym9sZDsnPisiICsgZGVsdGEgKyAiPC9zcGFuPjwvdGQ+IjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRleHQgPSAiPHRkIGNsYXNzPSciICsgZGFya0NsYXNzICsgInJpZ2h0Jz48c3BhbiBzdHlsZT0nY29sb3I6Z3JheTtmb250LXdlaWdodDpib2xkOyc+IiArIGRlbHRhICsgIjwvc3Bhbj48L3RkPiI7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHBhcnR5TnVtKys7CiAgICAgICAgJChlbGVtKS5hcHBlbmQodGV4dCk7CiAgICAgICAgLyoKICAgICAgICB0ZXh0ID0gIjx0ZCBjbGFzcz0nIiArIGRhcmtDbGFzcyArICJyaWdodCc+PHNwYW4gc3R5bGU9J2NvbG9yOmdyZWVuOyc+IiArIHJhbmsgKyAiPC9zcGFuPjwvdGQ+IjsKICAgICAgICAkKGVsZW0pLmFwcGVuZCh0ZXh0KTsKICAgICAgICB0ZXh0ID0gIjx0ZCBjbGFzcz0nIiArIGRhcmtDbGFzcyArICJyaWdodCc+PHNwYW4gc3R5bGU9J2NvbG9yOmdyZWVuOyc+IiArIHNlZWQgKyAiPC9zcGFuPjwvdGQ+IjsKICAgICAgICAkKGVsZW0pLmFwcGVuZCh0ZXh0KTsKICAgICAgICAqLwogICAgfQoKICAgIGZ1bmN0aW9uIHNob3dEZWx0YXMoKSB7CiAgICAgICAgdmFyIGNvdW50ID0gJCgiLnN0YW5kaW5ncyIpLmZpbmQoInRyIikubGVuZ3RoOwogICAgICAgIGlmIChjb3VudCA+IDIpIHsKICAgICAgICAgICAgdmFyIGNvbnRlc3RJZCA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvXEQrL2lnLCAnLCcpLnN1YnN0cigxKS5zcGxpdCgnLCcpWzBdOwogICAgICAgICAgICB2YXIgY29udGVzdGFudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjb250ZXN0YW50LWNlbGwiKTsKICAgICAgICAgICAgdmFyIGNvbnRlc3RhbnRzSGFuZGxlcyA9IEFycmF5LmZyb20oY29udGVzdGFudHMpLm1hcCh4ID0+IHguaW5uZXJUZXh0LnRyaW0oKSk7CgogICAgICAgICAgICBnZXREZWx0YXMoY29udGVzdElkLCBjb250ZXN0YW50c0hhbmRsZXMsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJCgiLnN0YW5kaW5ncyIpLmZpbmQoInRyIikuZmlyc3QoKS5maW5kKCJ0aCIpLmxhc3QoKS5yZW1vdmVDbGFzcygicmlnaHQiKTsKICAgICAgICAgICAgICAgICQoIi5zdGFuZGluZ3MiKS5maW5kKCJ0ciIpLmZpbmQoInRkIikucmVtb3ZlQ2xhc3MoInJpZ2h0Iik7CiAgICAgICAgICAgICAgICAkKCIuc3RhbmRpbmdzIikuZmluZCgidHIiKS5lYWNoKG1vZGlmeVBhcnR5SHRtbCk7CiAgICAgICAgICAgICAgICBpZiAoY291bnQgJSAyID09IDApIHsKICAgICAgICAgICAgICAgICAgICAkKCIuc3RhbmRpbmdzIikuZmluZCgidHIiKS5sYXN0KCkuZmluZCgidGQiKS5sYXN0KCkucmVwbGFjZVdpdGgoIjx0ZCBjbGFzcz0nc21hbGxlciBib3R0b20gcmlnaHQgZGFyayc+JkRlbHRhOzwvdGQ+Iik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQoIi5zdGFuZGluZ3MiKS5maW5kKCJ0ciIpLmxhc3QoKS5maW5kKCJ0ZCIpLmxhc3QoKS5yZXBsYWNlV2l0aCgiPHRkIGNsYXNzPSdzbWFsbGVyIGJvdHRvbSByaWdodCc+JkRlbHRhOzwvdGQ+Iik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBwYXJzZURlbHRhcyhkYXRhLCBjYWxsYmFjaykgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5yZXN1bHQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGRhdGEucmVzdWx0W2ldLmhhbmRsZTsKICAgICAgICAgICAgdmFyIGRlbHRhID0gZGF0YS5yZXN1bHRbaV0ubmV3UmF0aW5nIC0gZGF0YS5yZXN1bHRbaV0ub2xkUmF0aW5nOwogICAgICAgICAgICB2YXIgcmFuayA9IGRhdGEucmVzdWx0W2ldLnJhbms7CiAgICAgICAgICAgIHZhciBzZWVkID0gZGF0YS5yZXN1bHRbaV0uc2VlZDsKCiAgICAgICAgICAgIHZhciByZXMgPSB7CiAgICAgICAgICAgICAgICBkZWx0YSA6IHBhcnNlSW50KGRlbHRhKSwKICAgICAgICAgICAgICAgIHNlZWQgOiBwYXJzZUludChzZWVkKSwKICAgICAgICAgICAgICAgIHJhbmsgOiBwYXJzZUludChyYW5rKQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgcmVzdWx0c1toYW5kbGVdID0gcmVzOwogICAgICAgIH0KCiAgICAgICAgY2FsbGJhY2soKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXREZWx0YXMoY29udGVzdElkLCBjb250ZXN0YW50c0hhbmRsZXMsIGNhbGxiYWNrKSB7CiAgICAgICAgLy8gdmFyIGxvY2FsU2VydmVyID0gImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8iCiAgICAgICAgdmFyIGhlcm9rdVNlcnZlck9sZCA9ICJodHRwczovL2NmLXByZWRpY3Rvci1mcm9udGVuZC5oZXJva3VhcHAuY29tLyI7CiAgICAgICAgdmFyIHBhZ2VPbGQgPSAiR2V0TmV4dFJhdGluZ1NlcnZsZXQ/Y29udGVzdElkPSIgKyBjb250ZXN0SWQ7CiAgICAgICAgdmFyIHNlcnZlck9sZCA9IGhlcm9rdVNlcnZlck9sZCArIHBhZ2VPbGQ7CgogICAgICAgIHZhciBoZXJva3VTZXJ2ZXJOZXcgPSAiaHR0cHM6Ly9jZi1wcmVkaWN0b3IuaGVyb2t1YXBwLmNvbS8iOwogICAgICAgIHZhciBwYWdlTmV3ID0gIkdldFBhcnRpYWxSYXRpbmdDaGFuZ2VzU2VydmxldD9jb250ZXN0SWQ9IiArIGNvbnRlc3RJZCArICImaGFuZGxlcz0iK2NvbnRlc3RhbnRzSGFuZGxlcy5qb2luKCIsIik7CiAgICAgICAgdmFyIHNlcnZlck5ldyA9IGhlcm9rdVNlcnZlck5ldyArIHBhZ2VOZXc7CgogICAgICAgIHRyeXsKICAgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgICAgICAgICAgIHVybDogc2VydmVyTmV3LAogICAgICAgICAgICAgICAgb25sb2FkOiBmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IHJlcy5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHRleHQpOwogICAgICAgICAgICAgICAgICAgIHBhcnNlRGVsdGFzKGRhdGEsIGNhbGxiYWNrKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7ICAgIAogICAgICAgIH1jYXRjaChlcnIpewogICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICB1cmw6IHNlcnZlck9sZCwKICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IHJlcy5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZSh0ZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VEZWx0YXMoZGF0YSwgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOyAgICAKICAgICAgICAgICAgfWNhdGNoKGVycil7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOyAgIAogICAgICAgICAgICB9ICAgIAogICAgICAgIH0KICAgIH0KfSkoKTs="},{"name":"全网VIP视频破解去广告免费看+全网音乐下载+知乎增强+短视频无水印下载","options":{"check_for_updates":false,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://*.zhmdy.top/*","*://*.eggvod.cn/*"],"orig_includes":[],"orig_matches":["*://*.youku.com/*","*://*.iqiyi.com/*","*://*.iq.com/*","*://*.qq.com/*","*://*.le.com/*","*://*.tudou.com/*","*://*.mgtv.com/*","*://tv.sohu.com/*","*://film.sohu.com/*","*://*.bilibili.com/*","*://*.pptv.com/*","*://*.liangxinyao.com/*","*://music.163.com/*","*://*.kugou.com/*","*://*.kuwo.cn/*","*://*.ximalaya.com/*","*://*.douyin.com/*","*://*.kuaishou.com/*","*://*.ixigua.com/*"],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1657970104733,"data":{"iconWaitTime":"s0.5","playVideoLineText":"s"}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/376078-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A%E5%85%8D%E8%B4%B9%E7%9C%8B-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD-%E7%9F%A5%E4%B9%8E%E5%A2%9E%E5%BC%BA-%E7%9F%AD%E8%A7%86%E9%A2%91%E6%97%A0%E6%B0%B4%E5%8D%B0%E4%B8%8B%E8%BD%BD/code/%E5%85%A8%E7%BD%91VIP%E8%A7%86%E9%A2%91%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A%E5%85%8D%E8%B4%B9%E7%9C%8B+%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD+%E7%9F%A5%E4%B9%8E%E5%A2%9E%E5%BC%BA+%E7%9F%AD%E8%A7%86%E9%A2%91%E6%97%A0%E6%B0%B4%E5%8D%B0%E4%B8%8B%E8%BD%BD.user.js","uuid":"63c2844c-bb6c-43fb-8f83-70f97cd49148","source":"","requires":[{"meta":{"name":"crypto-js.min.js","url":"https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/crypto-js/4.1.1/crypto-js.min.js","ts":1656544179800,"mimetype":"text/javascript"},"source":""}]},{"name":"bliveproxy-把打赏全换成自己的名字","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/https?:\\/\\/live\\.bilibili\\.com\\/?\\??.*/","/https?:\\/\\/live\\.bilibili\\.com\\/\\d+\\??.*/","/https?:\\/\\/live\\.bilibili\\.com\\/(blanc\\/)?\\d+\\??.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1659267186893,"data":{}},"enabled":true,"position":5,"uuid":"6c0f0b33-63c5-4477-ad5b-d38fc788493f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBibGl2ZXByb3h5LeaKiuaJk+i1j+WFqOaNouaIkOiHquW3seeahOWQjeWtlwovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAZGVzY3JpcHRpb24gIOaKiuaJk+i1j+WFqOaNouaIkOiHquW3seeahOWQjeWtlwovLyBAYXV0aG9yICAgICAgIHhmZ3J5dWprCi8vIEBpbmNsdWRlICAgICAgL2h0dHBzPzpcL1wvbGl2ZVwuYmlsaWJpbGlcLmNvbVwvP1w/Py4qLwovLyBAaW5jbHVkZSAgICAgIC9odHRwcz86XC9cL2xpdmVcLmJpbGliaWxpXC5jb21cL1xkK1w/Py4qLwovLyBAaW5jbHVkZSAgICAgIC9odHRwcz86XC9cL2xpdmVcLmJpbGliaWxpXC5jb21cLyhibGFuY1wvKT9cZCtcPz8uKi8KLy8gQHJ1bi1hdCAgICAgICBkb2N1bWVudC1zdGFydAovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9nb29nbGUvYnJvdGxpQDU2OTJlNDIyZGE2YWYxZTk5MWY5MTgyMzQ1ZDU4ZGY4Nzg2NmJjNWUvanMvZGVjb2RlLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9wYWtvQDIuMC4zL2Rpc3QvcGFrb19pbmZsYXRlLm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy80MTc1NjAtYmxpdmVwcm94eS9jb2RlL2JsaXZlcHJveHkuanM/dmVyc2lvbj05MzEwMjIKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogIC8vIOeUqOaIt+WQjQogIGNvbnN0IFVTRVJOQU1FID0gJ0Nyby1NYXJtb3QnCiAgLy8g5aS05YOPVVJMCiAgY29uc3QgQVZBVEFSX1VSTCA9ICdodHRwczovL2kwLmhkc2xiLmNvbS9iZnMvZmFjZS8yOWI2YmU4YWE2MTFlNzBhM2QzYWMyMTljZGFmNWU3MmI2MDRmMmRlLmpwZycKCiAgLy8g56S854mpCiAgYmxpdmVwcm94eS5hZGRDb21tYW5kSGFuZGxlcignU0VORF9HSUZUJywgY29tbWFuZCA9PiB7CiAgICBsZXQgZGF0YSA9IGNvbW1hbmQuZGF0YQogICAgZGF0YS51bmFtZSA9IFVTRVJOQU1FCiAgICBkYXRhLmZhY2UgPSBBVkFUQVJfVVJMCiAgfSkKICBibGl2ZXByb3h5LmFkZENvbW1hbmRIYW5kbGVyKCdDT01CT19TRU5EJywgY29tbWFuZCA9PiB7CiAgICBsZXQgZGF0YSA9IGNvbW1hbmQuZGF0YQogICAgZGF0YS51bmFtZSA9IFVTRVJOQU1FCiAgfSkKICAvLyDphpLnm67nlZnoqIAKICBibGl2ZXByb3h5LmFkZENvbW1hbmRIYW5kbGVyKCdTVVBFUl9DSEFUX01FU1NBR0UnLCBjb21tYW5kID0+IHsKICAgIGxldCBkYXRhID0gY29tbWFuZC5kYXRhCiAgICBkYXRhLnVzZXJfaW5mby51bmFtZSA9IFVTRVJOQU1FCiAgICBkYXRhLnVzZXJfaW5mby5mYWNlID0gQVZBVEFSX1VSTAogIH0pCiAgLy8g5LiK6IiwCiAgLy8g5YW25a6e5LiK6Iiw5raI5oGv55So55qE5LiN5piv6L+Z5p2h77yM5oeS5b6X5om+5LqGCiAgYmxpdmVwcm94eS5hZGRDb21tYW5kSGFuZGxlcignR1VBUkRfQlVZJywgY29tbWFuZCA9PiB7CiAgICBsZXQgZGF0YSA9IGNvbW1hbmQuZGF0YQogICAgZGF0YS51c2VybmFtZSA9IFVTRVJOQU1FCiAgfSkKfSkoKTs=","requires":[{"meta":{"name":"decode.js","url":"https://cdn.jsdelivr.net/gh/google/brotli@5692e422da6af1e991f9182345d58df87866bc5e/js/decode.js","ts":1659267190716,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"pako_inflate.min.js","url":"https://cdn.jsdelivr.net/npm/pako@2.0.3/dist/pako_inflate.min.js","ts":1659267190069,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"bliveproxy.js","url":"https://greasyfork.org/scripts/417560-bliveproxy/code/bliveproxy.js?version=931022","ts":1659267188012,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBibGl2ZXByb3h5Ci8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4zCi8vIEBkZXNjcmlwdGlvbiAgQuermeebtOaSrXdlYnNvY2tldCBob29r5qGG5p62Ci8vIEBhdXRob3IgICAgICAgeGZncnl1amsKLy8gQGluY2x1ZGUgICAgICAvaHR0cHM/OlwvXC9saXZlXC5iaWxpYmlsaVwuY29tXC8/XD8/LiovCi8vIEBpbmNsdWRlICAgICAgL2h0dHBzPzpcL1wvbGl2ZVwuYmlsaWJpbGlcLmNvbVwvXGQrXD8/LiovCi8vIEBpbmNsdWRlICAgICAgL2h0dHBzPzpcL1wvbGl2ZVwuYmlsaWJpbGlcLmNvbVwvKGJsYW5jXC8pP1xkK1w/Py4qLwovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2dvb2dsZS9icm90bGlANTY5MmU0MjJkYTZhZjFlOTkxZjkxODIzNDVkNThkZjg3ODY2YmM1ZS9qcy9kZWNvZGUuanMKLy8gQHJlcXVpcmUgICAgICBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3Bha29AMi4wLjMvZGlzdC9wYWtvX2luZmxhdGUubWluLmpzCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIOS9v+eUqOaWueazle+8mgovLyBibGl2ZXByb3h5LmFkZENvbW1hbmRIYW5kbGVyKCdEQU5NVV9NU0cnLCBjb21tYW5kID0+IHsKLy8gICBjb25zb2xlLmxvZyhjb21tYW5kKQovLyAgIGxldCBpbmZvID0gY29tbWFuZC5pbmZvCi8vICAgaW5mb1sxXSA9ICfmtYvor5UnCi8vIH0pCgooZnVuY3Rpb24oKSB7CiAgY29uc3QgSEVBREVSX1NJWkUgPSAxNgoKICBjb25zdCBXU19CT0RZX1BST1RPQ09MX1ZFUlNJT05fTk9STUFMID0gMAogIGNvbnN0IFdTX0JPRFlfUFJPVE9DT0xfVkVSU0lPTl9IRUFSVEJFQVQgPSAxCiAgY29uc3QgV1NfQk9EWV9QUk9UT0NPTF9WRVJTSU9OX0RFRkxBVEUgPSAyCiAgY29uc3QgV1NfQk9EWV9QUk9UT0NPTF9WRVJTSU9OX0JST1RMSSA9IDMKCiAgY29uc3QgT1BfSEVBUlRCRUFUX1JFUExZID0gMwogIGNvbnN0IE9QX1NFTkRfTVNHX1JFUExZID0gNQoKICBsZXQgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKQogIGxldCB0ZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpCgogIGZ1bmN0aW9uIG1haW4oKSB7CiAgICBpZiAod2luZG93LmJsaXZlcHJveHkpIHsKICAgICAgLy8g6Ziy5q2i5aSa5qyh5Yqg6L29CiAgICAgIHJldHVybgogICAgfQogICAgaW5pdEFwaSgpCiAgICBob29rKCkKICB9CgogIGZ1bmN0aW9uIGluaXRBcGkoKSB7CiAgICB3aW5kb3cuYmxpdmVwcm94eSA9IGFwaQogIH0KCiAgbGV0IGFwaSA9IHsKICAgIGFkZENvbW1hbmRIYW5kbGVyKGNtZCwgaGFuZGxlcikgewogICAgICBsZXQgaGFuZGxlcnMgPSB0aGlzLl9jb21tYW5kSGFuZGxlcnNbY21kXQogICAgICBpZiAoIWhhbmRsZXJzKSB7CiAgICAgICAgaGFuZGxlcnMgPSB0aGlzLl9jb21tYW5kSGFuZGxlcnNbY21kXSA9IFtdCiAgICAgIH0KICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKQogICAgfSwKICAgIHJlbW92ZUNvbW1hbmRIYW5kbGVyKGNtZCwgaGFuZGxlcikgewogICAgICBsZXQgaGFuZGxlcnMgPSB0aGlzLl9jb21tYW5kSGFuZGxlcnNbY21kXQogICAgICBpZiAoIWhhbmRsZXJzKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgdGhpcy5fY29tbWFuZEhhbmRsZXJzW2NtZF0gPSBoYW5kbGVycy5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBoYW5kbGVyKQogICAgfSwKCiAgICAvLyDnp4HmnIlBUEkKICAgIF9jb21tYW5kSGFuZGxlcnM6IHt9LAogICAgX2dldENvbW1hbmRIYW5kbGVycyhjbWQpIHsKICAgICAgcmV0dXJuIHRoaXMuX2NvbW1hbmRIYW5kbGVyc1tjbWRdIHx8IG51bGwKICAgIH0KICB9CgogIGZ1bmN0aW9uIGhvb2soKSB7CiAgICB3aW5kb3cuV2ViU29ja2V0ID0gbmV3IFByb3h5KHdpbmRvdy5XZWJTb2NrZXQsIHsKICAgICAgY29uc3RydWN0KHRhcmdldCwgYXJncykgewogICAgICAgIGxldCBvYmogPSBuZXcgdGFyZ2V0KC4uLmFyZ3MpCiAgICAgICAgcmV0dXJuIG5ldyBQcm94eShvYmosIHByb3h5SGFuZGxlcikKICAgICAgfQogICAgfSkKICB9CgogIGxldCBwcm94eUhhbmRsZXIgPSB7CiAgICBnZXQodGFyZ2V0LCBwcm9wZXJ0eSkgewogICAgICBsZXQgdmFsdWUgPSB0YXJnZXRbcHJvcGVydHldCiAgICAgIGlmICgodHlwZW9mIHZhbHVlKSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHZhbHVlID0gdmFsdWUuYmluZCh0YXJnZXQpCiAgICAgIH0KICAgICAgcmV0dXJuIHZhbHVlCiAgICB9LAogICAgc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7CiAgICAgIGlmIChwcm9wZXJ0eSA9PT0gJ29ubWVzc2FnZScpIHsKICAgICAgICBsZXQgcmVhbE9uTWVzc2FnZSA9IHZhbHVlCiAgICAgICAgdmFsdWUgPSBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgbXlPbk1lc3NhZ2UoZXZlbnQsIHJlYWxPbk1lc3NhZ2UpCiAgICAgICAgfQogICAgICB9CiAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZQogICAgICByZXR1cm4gdmFsdWUKICAgIH0KICB9CgogIGZ1bmN0aW9uIG15T25NZXNzYWdlKGV2ZW50LCByZWFsT25NZXNzYWdlKSB7CiAgICBpZiAoIShldmVudC5kYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7CiAgICAgIHJlYWxPbk1lc3NhZ2UoZXZlbnQpCiAgICAgIHJldHVybgogICAgfQoKICAgIGxldCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoZXZlbnQuZGF0YSkKICAgIGZ1bmN0aW9uIGNhbGxSZWFsT25NZXNzYWdlQnlQYWNrZXQocGFja2V0KSB7CiAgICAgIHJlYWxPbk1lc3NhZ2Uoey4uLmV2ZW50LCBkYXRhOiBwYWNrZXR9KQogICAgfQogICAgaGFuZGxlTWVzc2FnZShkYXRhLCBjYWxsUmVhbE9uTWVzc2FnZUJ5UGFja2V0KQogIH0KCiAgZnVuY3Rpb24gbWFrZVBhY2tldEZyb21Db21tYW5kKGNvbW1hbmQpIHsKICAgIGxldCBib2R5ID0gdGV4dEVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KGNvbW1hbmQpKQogICAgcmV0dXJuIG1ha2VQYWNrZXRGcm9tVWludDhBcnJheShib2R5LCBPUF9TRU5EX01TR19SRVBMWSkKICB9CgogIGZ1bmN0aW9uIG1ha2VQYWNrZXRGcm9tVWludDhBcnJheShib2R5LCBvcGVyYXRpb24pIHsKICAgIGxldCBwYWNrTGVuID0gSEVBREVSX1NJWkUgKyBib2R5LmJ5dGVMZW5ndGgKICAgIGxldCBwYWNrZXQgPSBuZXcgQXJyYXlCdWZmZXIocGFja0xlbikKCiAgICAvLyDkuI3pnIDopoHljovnvKkKICAgIGxldCB2ZXIgPSBvcGVyYXRpb24gPT09IE9QX0hFQVJUQkVBVF9SRVBMWSA/IFdTX0JPRFlfUFJPVE9DT0xfVkVSU0lPTl9IRUFSVEJFQVQgOiBXU19CT0RZX1BST1RPQ09MX1ZFUlNJT05fTk9STUFMCiAgICBsZXQgcGFja2V0VmlldyA9IG5ldyBEYXRhVmlldyhwYWNrZXQpCiAgICBwYWNrZXRWaWV3LnNldFVpbnQzMigwLCBwYWNrTGVuKSAgICAgICAgLy8gcGFja19sZW4KICAgIHBhY2tldFZpZXcuc2V0VWludDE2KDQsIEhFQURFUl9TSVpFKSAgICAvLyByYXdfaGVhZGVyX3NpemUKICAgIHBhY2tldFZpZXcuc2V0VWludDE2KDYsIHZlcikgICAgICAgICAgICAvLyB2ZXIKICAgIHBhY2tldFZpZXcuc2V0VWludDMyKDgsIG9wZXJhdGlvbikgICAgICAvLyBvcGVyYXRpb24KICAgIHBhY2tldFZpZXcuc2V0VWludDMyKDEyLCAxKSAgICAgICAgICAgICAvLyBzZXFfaWQKCiAgICBsZXQgcGFja2V0Qm9keSA9IG5ldyBVaW50OEFycmF5KHBhY2tldCwgSEVBREVSX1NJWkUsIGJvZHkuYnl0ZUxlbmd0aCkKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5ieXRlTGVuZ3RoOyBpKyspIHsKICAgICAgcGFja2V0Qm9keVtpXSA9IGJvZHlbaV0KICAgIH0KICAgIHJldHVybiBwYWNrZXQKICB9CgogIGZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZGF0YSwgY2FsbFJlYWxPbk1lc3NhZ2VCeVBhY2tldCkgewogICAgbGV0IG9mZnNldCA9IDAKICAgIHdoaWxlIChvZmZzZXQgPCBkYXRhLmJ5dGVMZW5ndGgpIHsKICAgICAgbGV0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGRhdGEuYnVmZmVyLCBvZmZzZXQpCiAgICAgIGxldCBwYWNrTGVuID0gZGF0YVZpZXcuZ2V0VWludDMyKDApCiAgICAgIC8vIGxldCByYXdIZWFkZXJTaXplID0gZGF0YVZpZXcuZ2V0VWludDE2KDQpCiAgICAgIGxldCB2ZXIgPSBkYXRhVmlldy5nZXRVaW50MTYoNikKICAgICAgbGV0IG9wZXJhdGlvbiA9IGRhdGFWaWV3LmdldFVpbnQzMig4KQogICAgICAvLyBsZXQgc2VxSWQgPSBkYXRhVmlldy5nZXRVaW50MzIoMTIpCgogICAgICBsZXQgYm9keSA9IG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBvZmZzZXQgKyBIRUFERVJfU0laRSwgcGFja0xlbiAtIEhFQURFUl9TSVpFKQogICAgICBpZiAob3BlcmF0aW9uID09PSBPUF9TRU5EX01TR19SRVBMWSkgewogICAgICAgIHN3aXRjaCAodmVyKSB7CiAgICAgICAgY2FzZSBXU19CT0RZX1BST1RPQ09MX1ZFUlNJT05fTk9STUFMOgogICAgICAgICAgYm9keSA9IHRleHREZWNvZGVyLmRlY29kZShib2R5KQogICAgICAgICAgYm9keSA9IEpTT04ucGFyc2UoYm9keSkKICAgICAgICAgIGhhbmRsZUNvbW1hbmQoYm9keSwgY2FsbFJlYWxPbk1lc3NhZ2VCeVBhY2tldCkKICAgICAgICAgIGJyZWFrCiAgICAgICAgY2FzZSBXU19CT0RZX1BST1RPQ09MX1ZFUlNJT05fREVGTEFURToKICAgICAgICAgIGJvZHkgPSBwYWtvLmluZmxhdGUoYm9keSkKICAgICAgICAgIGhhbmRsZU1lc3NhZ2UoYm9keSwgY2FsbFJlYWxPbk1lc3NhZ2VCeVBhY2tldCkKICAgICAgICAgIGJyZWFrCiAgICAgICAgY2FzZSBXU19CT0RZX1BST1RPQ09MX1ZFUlNJT05fQlJPVExJOgogICAgICAgICAgYm9keSA9IEJyb3RsaURlY29kZShib2R5KQogICAgICAgICAgaGFuZGxlTWVzc2FnZShib2R5LCBjYWxsUmVhbE9uTWVzc2FnZUJ5UGFja2V0KQogICAgICAgICAgYnJlYWsKICAgICAgICBkZWZhdWx0OiB7CiAgICAgICAgICBsZXQgcGFja2V0ID0gbWFrZVBhY2tldEZyb21VaW50OEFycmF5KGJvZHksIG9wZXJhdGlvbikKICAgICAgICAgIGNhbGxSZWFsT25NZXNzYWdlQnlQYWNrZXQocGFja2V0KQogICAgICAgICAgYnJlYWsKICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGxldCBwYWNrZXQgPSBtYWtlUGFja2V0RnJvbVVpbnQ4QXJyYXkoYm9keSwgb3BlcmF0aW9uKQogICAgICAgIGNhbGxSZWFsT25NZXNzYWdlQnlQYWNrZXQocGFja2V0KQogICAgICB9CgogICAgICBvZmZzZXQgKz0gcGFja0xlbgogICAgfQogIH0KCiAgZnVuY3Rpb24gaGFuZGxlQ29tbWFuZChjb21tYW5kLCBjYWxsUmVhbE9uTWVzc2FnZUJ5UGFja2V0KSB7CiAgICBpZiAoY29tbWFuZCBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICAgIGZvciAobGV0IG9uZUNvbW1hbmQgb2YgY29tbWFuZCkgewogICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZChvbmVDb21tYW5kKQogICAgICB9CiAgICAgIHJldHVybgogICAgfQoKICAgIGxldCBjbWQgPSBjb21tYW5kLmNtZCB8fCAnJwogICAgbGV0IHBvcyA9IGNtZC5pbmRleE9mKCc6JykKICAgIGlmIChwb3MgIT0gLTEpIHsKICAgICAgY21kID0gY21kLnN1YnN0cigwLCBwb3MpCiAgICB9CiAgICBsZXQgaGFuZGxlcnMgPSBhcGkuX2dldENvbW1hbmRIYW5kbGVycyhjbWQpCiAgICBpZiAoaGFuZGxlcnMpIHsKICAgICAgZm9yIChsZXQgaGFuZGxlciBvZiBoYW5kbGVycykgewogICAgICAgIGhhbmRsZXIoY29tbWFuZCkKICAgICAgfQogICAgfQogICAgLy8gY29uc29sZS5sb2coY29tbWFuZCkKCiAgICBsZXQgcGFja2V0ID0gbWFrZVBhY2tldEZyb21Db21tYW5kKGNvbW1hbmQpCiAgICBjYWxsUmVhbE9uTWVzc2FnZUJ5UGFja2V0KHBhY2tldCkKICB9CgogIG1haW4oKQp9KSgpOwo="}]},{"name":"bilibili自动签到","options":{"check_for_updates":false,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["api.bilibili.com","api.live.bilibili.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.bilibili.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1659267329781,"data":{}},"enabled":true,"position":6,"uuid":"ee58431e-0791-4b5f-92f1-81eb8ab7bd9d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBiaWxpYmlsaeiHquWKqOetvuWIsAovLyBAbmFtZXNwYWNlICAgIHd5egovLyBAZGVzY3JpcHRpb24gIGJpbGliaWxp6Ieq5Yqo562+5YiwCi8vIEB2ZXJzaW9uICAgICAgMS4xLjQKLy8gQGF1dGhvciAgICAgICB3eXoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5iaWxpYmlsaS5jb20vKgovLyBAZ3JhbnQgR01feG1saHR0cFJlcXVlc3QKLy8gQGdyYW50IEdNX25vdGlmaWNhdGlvbgovLyBAY29ubmVjdCBhcGkuYmlsaWJpbGkuY29tCi8vIEBjb25uZWN0IGFwaS5saXZlLmJpbGliaWxpLmNvbQovLyA9PS9Vc2VyU2NyaXB0PT0KCnJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICB1cmw6ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL25hdicsCiAgICAgICAgcmVzcG9uc2VUeXBlOiAianNvbiIsCiAgICAgICAgb25sb2FkOiBmdW5jdGlvbiAoeGhyKSB7CgogICAgICAgICAgICBzd2l0Y2ggKHhoci5yZXNwb25zZS5jb2RlKSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL2FwaS5saXZlLmJpbGliaWxpLmNvbS9zaWduL2RvU2lnbicsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uICh4aHIpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHhoci5yZXNwb25zZS5jb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHTV9ub3RpZmljYXRpb24oJ+WTlOWTqeWTlOWTqeebtOaSreiHquWKqOetvuWIsOaIkOWKnycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwMTEwNDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdNX25vdGlmaWNhdGlvbih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHRpdGxlOiAnYmlsaWJpbGnoh6rliqjnrb7liLAgLSBTY3JpcHRDYXQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICB0ZXh0OiAn6YeN5aSN562+5YiwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdC56uZ562+5Yiw5a6M5oiQJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgLTEwMToKICAgICAgICAgICAgICAgICAgICBHTV9ub3RpZmljYXRpb24oewogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ2JpbGliaWxp6Ieq5Yqo562+5YiwIC0gU2NyaXB0Q2F0JywKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ+WTlOWTqeWTlOWTqeetvuWIsOWksei0pSzotKblj7fmnKrnmbvlvZUs6K+35YWI55m75b2VJywKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCflk5Tlk6nlk5Tlk6nnrb7liLDlpLHotKUs6LSm5Y+35pyq55m75b2VLOivt+WFiOeZu+W9lScpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKCiAgICAgICAgICAgIH0KCiAgICAgICAgfSwKICAgICAgICBvbmVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIEdNX25vdGlmaWNhdGlvbih7CiAgICAgICAgICAgICAgICB0aXRsZTogJ2JpbGliaWxp6Ieq5Yqo562+5YiwIC0gU2NyaXB0Q2F0JywKICAgICAgICAgICAgICAgIHRleHQ6ICfnvZHnu5zplJnor68sYmlsaWJpbGnnrb7liLDlpLHotKUnLAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmVqZWN0KCfnvZHnu5zplJnor68sYmlsaWJpbGnnrb7liLDlpLHotKUnKTsKICAgICAgICB9CiAgICB9KTsKCn0pOwoKCg=="}]}